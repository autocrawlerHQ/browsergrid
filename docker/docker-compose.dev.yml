# docker/docker-compose.dev.yml - Development overlay with Air hot reloading
services:
  server:
    build:
      context: ..
      dockerfile: docker/server/Dockerfile.dev
      target: dev                # Use the dev stage with Air
    volumes:
      # Live-mount source so Air rebuilds instantly
      - ../browsergrid:/app/browsergrid:cached
      - ../browsergrid/migrations:/migrations:cached
      - ../.air.toml:/app/.air.toml:ro
      # Cache Go modules for faster rebuilds
      - go_mod_cache:/go/pkg/mod
      # Shared profile storage
      - profile_data:/var/lib/browsergrid/profiles
    environment:
      - BROWSERGRID_ENV=dev
      - BROWSERGRID_POSTGRES_HOST=db
      - BROWSERGRID_POSTGRES_PORT=5432
      - REDIS_ADDR=redis:6379
      - BROWSERGRID_POSTGRES_USER=${BROWSERGRID_POSTGRES_USER:-browsergrid}
      - BROWSERGRID_POSTGRES_PASSWORD=${BROWSERGRID_POSTGRES_PASSWORD:-browsergrid}
      - BROWSERGRID_POSTGRES_DB=${BROWSERGRID_POSTGRES_DB:-browsergrid}
      - BROWSERGRID_API_PORT=${BROWSERGRID_API_PORT:-8765}
    # Override healthcheck for dev (Air takes longer to start)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  worker:
    build:
      context: ..
      dockerfile: docker/worker/Dockerfile.dev
      target: dev                # Use the dev stage with Air
    volumes:
      # Live-mount source so Air rebuilds instantly
      - ../browsergrid:/app/browsergrid:cached
      - ../.air.worker.toml:/app/.air.toml:ro
      # Cache Go modules for faster rebuilds
      - go_mod_cache:/go/pkg/mod
      # Mount Docker socket for Docker provider
      - /var/run/docker.sock:/var/run/docker.sock
      # Shared profile storage
      - profile_data:/var/lib/browsergrid/profiles
    environment:
      - BROWSERGRID_POSTGRES_HOST=db
      - BROWSERGRID_POSTGRES_PORT=5432
      - REDIS_ADDR=redis:6379
      - BROWSERGRID_POSTGRES_USER=${BROWSERGRID_POSTGRES_USER:-browsergrid}
      - BROWSERGRID_POSTGRES_PASSWORD=${BROWSERGRID_POSTGRES_PASSWORD:-browsergrid}
      - BROWSERGRID_POSTGRES_DB=${BROWSERGRID_POSTGRES_DB:-browsergrid}
      - BROWSERGRID_WORKER_NAME=${BROWSERGRID_WORKER_NAME:-worker-docker-dev}
      - BROWSERGRID_WORKER_PROVIDER=${BROWSERGRID_WORKER_PROVIDER:-docker}
      - BROWSERGRID_WORKER_CONCURRENCY=${BROWSERGRID_WORKER_CONCURRENCY:-2}
      - BROWSERGRID_WORKER_POLL_INTERVAL=${BROWSERGRID_WORKER_POLL_INTERVAL:-10s}

  prometheus:
    container_name: browsergrid-prometheus
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - browsergrid_server
    restart: unless-stopped

  asynqmon:
    container_name: browsergrid-asynqmon
    image: hibiken/asynqmon:latest
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_DB=0
      - PORT=4444
      - ENABLE_METRICS_EXPORTER=true
      - PROMETHEUS_ADDR=http://prometheus:9090
    depends_on:
      redis:
        condition: service_started
      prometheus:
        condition: service_started
    networks:
      - browsergrid_server
    restart: unless-stopped

volumes:
  go_mod_cache:
  prometheus_data:
  profile_data: 