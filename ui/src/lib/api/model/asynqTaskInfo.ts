/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * BrowserGrid API
 * BrowserGrid is a distributed browser automation platform using task queues for scalable browser session management.
 * OpenAPI spec version: 2.0
 */
import type { TimeDuration } from './timeDuration';
import type { AsynqTaskState } from './asynqTaskState';

export interface AsynqTaskInfo {
  /** CompletedAt is the time when the task is processed successfully.
Zero value (i.e. time.Time{}) indicates no value. */
  completedAt?: string;
  /** Deadline is the deadline for the task, zero value if not specified. */
  deadline?: string;
  /** Group is the name of the group in which the task belongs.

Tasks in the same queue can be grouped together by Group name and will be aggregated into one task
by a Server processing the queue.

Empty string (default) indicates task does not belong to any groups, and no aggregation will be applied to the task. */
  group?: string;
  /** ID is the identifier of the task. */
  id?: string;
  /** IsOrphaned describes whether the task is left in active state with no worker processing it.
An orphaned task indicates that the worker has crashed or experienced network failures and was not able to
extend its lease on the task.

This task will be recovered by running a server against the queue the task is in.
This field is only applicable to tasks with TaskStateActive. */
  isOrphaned?: boolean;
  /** LastErr is the error message from the last failure. */
  lastErr?: string;
  /** LastFailedAt is the time time of the last failure if any.
If the task has no failures, LastFailedAt is zero time (i.e. time.Time{}). */
  lastFailedAt?: string;
  /** MaxRetry is the maximum number of times the task can be retried. */
  maxRetry?: number;
  /** NextProcessAt is the time the task is scheduled to be processed,
zero if not applicable. */
  nextProcessAt?: string;
  /** Payload is the payload data of the task. */
  payload?: number[];
  /** Queue is the name of the queue in which the task belongs. */
  queue?: string;
  /** Result holds the result data associated with the task.
Use ResultWriter to write result data from the Handler. */
  result?: number[];
  /** Retention is duration of the retention period after the task is successfully processed. */
  retention?: TimeDuration;
  /** Retried is the number of times the task has retried so far. */
  retried?: number;
  /** State indicates the task state. */
  state?: AsynqTaskState;
  /** Timeout is the duration the task can be processed by Handler before being retried,
zero if not specified */
  timeout?: TimeDuration;
  /** Type is the type name of the task. */
  type?: string;
}
