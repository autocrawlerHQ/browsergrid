/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * BrowserGrid API
 * BrowserGrid is a distributed browser automation platform that provides scalable browser sessions and worker pool management.
 * OpenAPI spec version: 1.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

/**
 * Supported browser types
 */
export type Browser = typeof Browser[keyof typeof Browser];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Browser = {
  BrowserChrome: 'chrome',
  BrowserFirefox: 'firefox',
  BrowserEdge: 'edge',
  BrowserSafari: 'safari',
} as const;

/**
 * Browser version types (latest, stable, canary, dev)
 */
export type BrowserVersion = typeof BrowserVersion[keyof typeof BrowserVersion];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BrowserVersion = {
  VerLatest: 'latest',
  VerStable: 'stable',
  VerCanary: 'canary',
  VerDev: 'dev',
} as const;

/**
 * Error response with details
 */
export interface ErrorResponse {
  error?: string;
}

/**
 * Simple message response
 */
export interface MessageResponse {
  message?: string;
}

/**
 * Supported operating systems for browser sessions
 */
export type OperatingSystem = typeof OperatingSystem[keyof typeof OperatingSystem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OperatingSystem = {
  OSWindows: 'windows',
  OSMacOS: 'macos',
  OSLinux: 'linux',
} as const;

/**
 * Type of provider for a work pool
 */
export type ProviderType = typeof ProviderType[keyof typeof ProviderType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProviderType = {
  ProviderDocker: 'docker',
  ProviderACI: 'azure_aci',
  ProviderLocal: 'local',
} as const;

/**
 * Proxy configuration with URL and optional credentials
 */
export interface ProxyConfig {
  proxy_password?: string;
  proxy_url?: string;
  proxy_username?: string;
}

/**
 * Resource limits for CPU, memory and timeout
 */
export interface ResourceLimits {
  cpu?: number;
  memory?: string;
  timeout_minutes?: number;
}

/**
 * Scaling parameters for updating work pool configuration
 */
export interface ScalingRequest {
  auto_scale?: boolean;
  /** @minimum 1 */
  max_concurrency?: number;
  /** @minimum 0 */
  max_idle_time?: number;
  /** @minimum 0 */
  min_size?: number;
  paused?: boolean;
}

export type ScalingResponseUpdates = { [key: string]: unknown };

/**
 * Response from a scaling operation with updated parameters
 */
export interface ScalingResponse {
  message?: string;
  updates?: ScalingResponseUpdates;
}

/**
 * Screen configuration with width, height, DPI and scale
 */
export interface ScreenConfig {
  dpi?: number;
  height?: number;
  scale?: number;
  width?: number;
}

export type SessionEnvironment = { [key: string]: unknown };

/**
 * Browser session with configuration and status
 */
export interface Session {
  available_at?: string;
  browser?: Browser;
  claimed_at?: string;
  claimed_by?: string;
  container_id?: string;
  container_network?: string;
  created_at?: string;
  environment?: SessionEnvironment;
  expires_at?: string;
  headless?: boolean;
  id?: string;
  is_pooled?: boolean;
  live_url?: string;
  operating_system?: OperatingSystem;
  pool_id?: string;
  provider?: string;
  proxy?: ProxyConfig;
  resource_limits?: ResourceLimits;
  screen?: ScreenConfig;
  status?: SessionStatus;
  updated_at?: string;
  version?: BrowserVersion;
  webhooks_enabled?: boolean;
  work_pool_id?: string;
  worker_id?: string;
  ws_endpoint?: string;
}

export type SessionEventData = { [key: string]: unknown };

/**
 * Session event with type, data and timestamp
 */
export interface SessionEvent {
  data?: SessionEventData;
  event?: SessionEventType;
  id?: string;
  session_id?: string;
  timestamp?: string;
}

/**
 * Response containing a list of session events with pagination info
 */
export interface SessionEventListResponse {
  events?: SessionEvent[];
  limit?: number;
  offset?: number;
  total?: number;
}

/**
 * Types of events that can occur during a session
 */
export type SessionEventType = typeof SessionEventType[keyof typeof SessionEventType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionEventType = {
  EvtSessionCreated: 'session_created',
  EvtResourceAllocated: 'resource_allocated',
  EvtSessionStarting: 'session_starting',
  EvtContainerStarted: 'container_started',
  EvtBrowserStarted: 'browser_started',
  EvtSessionAvailable: 'session_available',
  EvtSessionClaimed: 'session_claimed',
  EvtSessionAssigned: 'session_assigned',
  EvtSessionReady: 'session_ready',
  EvtSessionActive: 'session_active',
  EvtSessionIdle: 'session_idle',
  EvtHeartbeat: 'heartbeat',
  EvtPoolAdded: 'pool_added',
  EvtPoolRemoved: 'pool_removed',
  EvtPoolDrained: 'pool_drained',
  EvtSessionCompleted: 'session_completed',
  EvtSessionExpired: 'session_expired',
  EvtSessionTimedOut: 'session_timed_out',
  EvtSessionTerminated: 'session_terminated',
  EvtStartupFailed: 'startup_failed',
  EvtBrowserCrashed: 'browser_crashed',
  EvtContainerCrashed: 'container_crashed',
  EvtResourceExhausted: 'resource_exhausted',
  EvtNetworkError: 'network_error',
  EvtStatusChanged: 'status_changed',
  EvtConfigUpdated: 'config_updated',
  EvtHealthCheck: 'health_check',
} as const;

/**
 * Response containing a list of sessions with pagination info
 */
export interface SessionListResponse {
  limit?: number;
  offset?: number;
  sessions?: Session[];
  total?: number;
}

/**
 * Performance metrics including CPU, memory and network usage
 */
export interface SessionMetrics {
  cpu_percent?: number;
  id?: string;
  memory_mb?: number;
  network_rx_bytes?: number;
  network_tx_bytes?: number;
  session_id?: string;
  timestamp?: string;
}

/**
 * Current status of a browser session
 */
export type SessionStatus = typeof SessionStatus[keyof typeof SessionStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionStatus = {
  StatusPending: 'pending',
  StatusStarting: 'starting',
  StatusAvailable: 'available',
  StatusClaimed: 'claimed',
  StatusRunning: 'running',
  StatusIdle: 'idle',
  StatusCompleted: 'completed',
  StatusFailed: 'failed',
  StatusExpired: 'expired',
  StatusCrashed: 'crashed',
  StatusTimedOut: 'timed_out',
  StatusTerminated: 'terminated',
} as const;

export type WorkPoolDefaultEnv = { [key: string]: unknown };

/**
 * Work pool configuration for managing browser workers
 */
export interface WorkPool {
  auto_scale?: boolean;
  created_at?: string;
  default_env?: WorkPoolDefaultEnv;
  default_image?: string;
  default_priority?: number;
  description?: string;
  id?: string;
  max_concurrency?: number;
  max_idle_time?: number;
  min_size?: number;
  name?: string;
  paused?: boolean;
  provider?: ProviderType;
  queue_strategy?: string;
  updated_at?: string;
}

/**
 * Response containing a list of work pools
 */
export interface WorkPoolListResponse {
  pools?: WorkPool[];
  total?: number;
}

/**
 * Worker instance that handles browser sessions
 */
export interface Worker {
  active?: number;
  hostname?: string;
  id?: string;
  last_beat?: string;
  max_slots?: number;
  name?: string;
  paused?: boolean;
  pool_id?: string;
  provider?: ProviderType;
  started_at?: string;
}

/**
 * Heartbeat data with active session count
 */
export interface WorkerHeartbeatRequest {
  /** @minimum 0 */
  active?: number;
}

/**
 * Response containing a list of workers
 */
export interface WorkerListResponse {
  total?: number;
  workers?: Worker[];
}

/**
 * Pause configuration for a worker
 */
export interface WorkerPauseRequest {
  paused?: boolean;
}

export type GetApiV1SessionsParams = {
/**
 * Filter by session status
 */
status?: GetApiV1SessionsStatus;
/**
 * Filter sessions created after this time (RFC3339)
 */
start_time?: string;
/**
 * Filter sessions created before this time (RFC3339)
 */
end_time?: string;
/**
 * Pagination offset
 */
offset?: number;
/**
 * Pagination limit
 */
limit?: number;
};

export type GetApiV1SessionsStatus = typeof GetApiV1SessionsStatus[keyof typeof GetApiV1SessionsStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiV1SessionsStatus = {
  pending: 'pending',
  starting: 'starting',
  available: 'available',
  claimed: 'claimed',
  running: 'running',
  idle: 'idle',
  completed: 'completed',
  failed: 'failed',
  expired: 'expired',
  crashed: 'crashed',
  timed_out: 'timed_out',
  terminated: 'terminated',
} as const;

export type GetApiV1SessionsIdEventsParams = {
/**
 * Filter by event type
 */
event_type?: GetApiV1SessionsIdEventsEventType;
/**
 * Filter events created after this time (RFC3339)
 */
start_time?: string;
/**
 * Filter events created before this time (RFC3339)
 */
end_time?: string;
/**
 * Pagination offset
 */
offset?: number;
/**
 * Pagination limit
 */
limit?: number;
};

export type GetApiV1SessionsIdEventsEventType = typeof GetApiV1SessionsIdEventsEventType[keyof typeof GetApiV1SessionsIdEventsEventType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiV1SessionsIdEventsEventType = {
  session_created: 'session_created',
  resource_allocated: 'resource_allocated',
  session_starting: 'session_starting',
  container_started: 'container_started',
  browser_started: 'browser_started',
  session_available: 'session_available',
  session_claimed: 'session_claimed',
  session_assigned: 'session_assigned',
  session_ready: 'session_ready',
  session_active: 'session_active',
  session_idle: 'session_idle',
  heartbeat: 'heartbeat',
  pool_added: 'pool_added',
  pool_removed: 'pool_removed',
  pool_drained: 'pool_drained',
  session_completed: 'session_completed',
  session_expired: 'session_expired',
  session_timed_out: 'session_timed_out',
  session_terminated: 'session_terminated',
  startup_failed: 'startup_failed',
  browser_crashed: 'browser_crashed',
  container_crashed: 'container_crashed',
  resource_exhausted: 'resource_exhausted',
  network_error: 'network_error',
  status_changed: 'status_changed',
  config_updated: 'config_updated',
  health_check: 'health_check',
} as const;

export type GetApiV1WorkersParams = {
/**
 * Filter by work pool ID (UUID)
 */
pool_id?: string;
/**
 * Filter by online status
 */
online?: boolean;
};

export type GetApiV1WorkpoolsParams = {
/**
 * Filter by paused status
 */
paused?: boolean;
};

export type PatchApiV1WorkpoolsIdBody = { [key: string]: unknown };

export type GetApiV1WorkpoolsIdStats200 = { [key: string]: unknown };

/**
 * Get a list of browser sessions with optional filtering by status and time range
 * @summary List browser sessions
 */
export const getApiV1Sessions = <TData = AxiosResponse<SessionListResponse>>(
    params?: GetApiV1SessionsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/v1/sessions`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Create a new browser session with specified configuration
 * @summary Create a new browser session
 */
export const postApiV1Sessions = <TData = AxiosResponse<Session>>(
    session: Session, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/v1/sessions`,
      session,options
    );
  }

/**
 * Get details of a specific browser session by ID
 * @summary Get a browser session
 */
export const getApiV1SessionsId = <TData = AxiosResponse<Session>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/v1/sessions/${id}`,options
    );
  }

/**
 * Get a list of session events with optional filtering by event type and time range
 * @summary List session events
 */
export const getApiV1SessionsIdEvents = <TData = AxiosResponse<SessionEventListResponse>>(
    id: string,
    params?: GetApiV1SessionsIdEventsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/v1/sessions/${id}/events`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Create a new event for a session (e.g., page navigation, user interaction)
 * @summary Create a session event
 */
export const postApiV1SessionsIdEvents = <TData = AxiosResponse<SessionEvent>>(
    id: string,
    sessionEvent: SessionEvent, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/v1/sessions/${id}/events`,
      sessionEvent,options
    );
  }

/**
 * Create performance metrics for a session (CPU, memory, network usage)
 * @summary Create session metrics
 */
export const postApiV1SessionsIdMetrics = <TData = AxiosResponse<SessionMetrics>>(
    id: string,
    sessionMetrics: SessionMetrics, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/v1/sessions/${id}/metrics`,
      sessionMetrics,options
    );
  }

/**
 * Get a list of all workers with optional filtering
 * @summary List workers
 */
export const getApiV1Workers = <TData = AxiosResponse<WorkerListResponse>>(
    params?: GetApiV1WorkersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/v1/workers`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Get details of a specific worker by ID
 * @summary Get a worker
 */
export const getApiV1WorkersId = <TData = AxiosResponse<Worker>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/v1/workers/${id}`,options
    );
  }

/**
 * Delete a worker from the pool
 * @summary Delete a worker
 */
export const deleteApiV1WorkersId = <TData = AxiosResponse<MessageResponse>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `/api/v1/workers/${id}`,options
    );
  }

/**
 * Update worker status with current active session count
 * @summary Send worker heartbeat
 */
export const postApiV1WorkersIdHeartbeat = <TData = AxiosResponse<MessageResponse>>(
    id: string,
    workerHeartbeatRequest: WorkerHeartbeatRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/v1/workers/${id}/heartbeat`,
      workerHeartbeatRequest,options
    );
  }

/**
 * Pause or resume a worker to control its availability
 * @summary Pause or resume a worker
 */
export const postApiV1WorkersIdPause = <TData = AxiosResponse<MessageResponse>>(
    id: string,
    workerPauseRequest: WorkerPauseRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/v1/workers/${id}/pause`,
      workerPauseRequest,options
    );
  }

/**
 * Get a list of all work pools with optional filtering
 * @summary List work pools
 */
export const getApiV1Workpools = <TData = AxiosResponse<WorkPoolListResponse>>(
    params?: GetApiV1WorkpoolsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/v1/workpools`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Create a new work pool to manage browser workers
 * @summary Create a new work pool
 */
export const postApiV1Workpools = <TData = AxiosResponse<WorkPool>>(
    workPool: WorkPool, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/v1/workpools`,
      workPool,options
    );
  }

/**
 * Get details of a specific work pool by ID
 * @summary Get a work pool
 */
export const getApiV1WorkpoolsId = <TData = AxiosResponse<WorkPool>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/v1/workpools/${id}`,options
    );
  }

/**
 * Delete an existing work pool and all its workers
 * @summary Delete a work pool
 */
export const deleteApiV1WorkpoolsId = <TData = AxiosResponse<MessageResponse>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `/api/v1/workpools/${id}`,options
    );
  }

/**
 * Update configuration of an existing work pool
 * @summary Update a work pool
 */
export const patchApiV1WorkpoolsId = <TData = AxiosResponse<MessageResponse>>(
    id: string,
    patchApiV1WorkpoolsIdBody: PatchApiV1WorkpoolsIdBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/v1/workpools/${id}`,
      patchApiV1WorkpoolsIdBody,options
    );
  }

/**
 * Gracefully drain all workers from a work pool
 * @summary Drain a work pool
 */
export const postApiV1WorkpoolsIdDrain = <TData = AxiosResponse<MessageResponse>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/v1/workpools/${id}/drain`,undefined,options
    );
  }

/**
 * Update scaling parameters for a work pool
 * @summary Scale a work pool
 */
export const postApiV1WorkpoolsIdScale = <TData = AxiosResponse<ScalingResponse>>(
    id: string,
    scalingRequest: ScalingRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/v1/workpools/${id}/scale`,
      scalingRequest,options
    );
  }

/**
 * Get detailed statistics and metrics for a specific work pool
 * @summary Get work pool statistics
 */
export const getApiV1WorkpoolsIdStats = <TData = AxiosResponse<GetApiV1WorkpoolsIdStats200>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/v1/workpools/${id}/stats`,options
    );
  }

export type GetApiV1SessionsResult = AxiosResponse<SessionListResponse>
export type PostApiV1SessionsResult = AxiosResponse<Session>
export type GetApiV1SessionsIdResult = AxiosResponse<Session>
export type GetApiV1SessionsIdEventsResult = AxiosResponse<SessionEventListResponse>
export type PostApiV1SessionsIdEventsResult = AxiosResponse<SessionEvent>
export type PostApiV1SessionsIdMetricsResult = AxiosResponse<SessionMetrics>
export type GetApiV1WorkersResult = AxiosResponse<WorkerListResponse>
export type GetApiV1WorkersIdResult = AxiosResponse<Worker>
export type DeleteApiV1WorkersIdResult = AxiosResponse<MessageResponse>
export type PostApiV1WorkersIdHeartbeatResult = AxiosResponse<MessageResponse>
export type PostApiV1WorkersIdPauseResult = AxiosResponse<MessageResponse>
export type GetApiV1WorkpoolsResult = AxiosResponse<WorkPoolListResponse>
export type PostApiV1WorkpoolsResult = AxiosResponse<WorkPool>
export type GetApiV1WorkpoolsIdResult = AxiosResponse<WorkPool>
export type DeleteApiV1WorkpoolsIdResult = AxiosResponse<MessageResponse>
export type PatchApiV1WorkpoolsIdResult = AxiosResponse<MessageResponse>
export type PostApiV1WorkpoolsIdDrainResult = AxiosResponse<MessageResponse>
export type PostApiV1WorkpoolsIdScaleResult = AxiosResponse<ScalingResponse>
export type GetApiV1WorkpoolsIdStatsResult = AxiosResponse<GetApiV1WorkpoolsIdStats200>
