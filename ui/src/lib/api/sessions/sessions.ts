/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * BrowserGrid API
 * BrowserGrid is a distributed browser automation platform using task queues for scalable browser session management.
 * OpenAPI spec version: 2.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ErrorResponse,
  GetApiV1SessionsParams,
  MessageResponse,
  Session,
  SessionListResponse
} from '.././model';

import { customInstance } from '.././mutator';




/**
 * Get a list of browser sessions with optional filtering by status, time range, and pagination
 * @summary List browser sessions
 */
export const getApiV1Sessions = (
    params?: GetApiV1SessionsParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<SessionListResponse>(
      {url: `/api/v1/sessions`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1SessionsQueryKey = (params?: GetApiV1SessionsParams,) => {
    return [`/api/v1/sessions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1SessionsQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Sessions>>, TError = ErrorResponse>(params?: GetApiV1SessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Sessions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SessionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Sessions>>> = ({ signal }) => getApiV1Sessions(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Sessions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1SessionsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Sessions>>>
export type GetApiV1SessionsQueryError = ErrorResponse


export function useGetApiV1Sessions<TData = Awaited<ReturnType<typeof getApiV1Sessions>>, TError = ErrorResponse>(
 params: undefined |  GetApiV1SessionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Sessions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Sessions>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Sessions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Sessions<TData = Awaited<ReturnType<typeof getApiV1Sessions>>, TError = ErrorResponse>(
 params?: GetApiV1SessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Sessions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Sessions>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Sessions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Sessions<TData = Awaited<ReturnType<typeof getApiV1Sessions>>, TError = ErrorResponse>(
 params?: GetApiV1SessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Sessions>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List browser sessions
 */

export function useGetApiV1Sessions<TData = Awaited<ReturnType<typeof getApiV1Sessions>>, TError = ErrorResponse>(
 params?: GetApiV1SessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Sessions>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1SessionsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new browser session with specified configuration. The session will be created in pending status and a start task will be enqueued.
 * @summary Create a new browser session
 */
export const postApiV1Sessions = (
    session: Session,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Session>(
      {url: `/api/v1/sessions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: session, signal
    },
      );
    }
  


export const getPostApiV1SessionsMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Sessions>>, TError,{data: Session}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Sessions>>, TError,{data: Session}, TContext> => {

const mutationKey = ['postApiV1Sessions'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Sessions>>, {data: Session}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Sessions(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SessionsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Sessions>>>
    export type PostApiV1SessionsMutationBody = Session
    export type PostApiV1SessionsMutationError = ErrorResponse

    /**
 * @summary Create a new browser session
 */
export const usePostApiV1Sessions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Sessions>>, TError,{data: Session}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Sessions>>,
        TError,
        {data: Session},
        TContext
      > => {

      const mutationOptions = getPostApiV1SessionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get detailed information about a specific browser session by its ID
 * @summary Get a browser session
 */
export const getApiV1SessionsId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Session>(
      {url: `/api/v1/sessions/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1SessionsIdQueryKey = (id: string,) => {
    return [`/api/v1/sessions/${id}`] as const;
    }

    
export const getGetApiV1SessionsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1SessionsId>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1SessionsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SessionsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1SessionsId>>> = ({ signal }) => getApiV1SessionsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1SessionsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1SessionsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1SessionsId>>>
export type GetApiV1SessionsIdQueryError = ErrorResponse


export function useGetApiV1SessionsId<TData = Awaited<ReturnType<typeof getApiV1SessionsId>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1SessionsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1SessionsId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1SessionsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1SessionsId<TData = Awaited<ReturnType<typeof getApiV1SessionsId>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1SessionsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1SessionsId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1SessionsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1SessionsId<TData = Awaited<ReturnType<typeof getApiV1SessionsId>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1SessionsId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a browser session
 */

export function useGetApiV1SessionsId<TData = Awaited<ReturnType<typeof getApiV1SessionsId>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1SessionsId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1SessionsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Stop and terminate a running browser session. If the session is already in a terminal state, it will return success immediately.
 * @summary Delete a browser session
 */
export const deleteApiV1SessionsId = (
    id: string,
 ) => {
      
      
      return customInstance<MessageResponse>(
      {url: `/api/v1/sessions/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiV1SessionsIdMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1SessionsId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1SessionsId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiV1SessionsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1SessionsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiV1SessionsId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1SessionsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1SessionsId>>>
    
    export type DeleteApiV1SessionsIdMutationError = ErrorResponse

    /**
 * @summary Delete a browser session
 */
export const useDeleteApiV1SessionsId = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1SessionsId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1SessionsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1SessionsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    