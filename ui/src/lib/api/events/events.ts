/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * BrowserGrid API
 * BrowserGrid is a distributed browser automation platform that provides scalable browser sessions and worker pool management.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ErrorResponse,
  GetApiV1SessionsIdEventsParams,
  SessionEvent,
  SessionEventListResponse
} from '.././model';

import { customInstance } from '.././mutator';




/**
 * Get a list of session events with optional filtering by event type and time range
 * @summary List session events
 */
export const getApiV1SessionsIdEvents = (
    id: string,
    params?: GetApiV1SessionsIdEventsParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<SessionEventListResponse>(
      {url: `/api/v1/sessions/${id}/events`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1SessionsIdEventsQueryKey = (id: string,
    params?: GetApiV1SessionsIdEventsParams,) => {
    return [`/api/v1/sessions/${id}/events`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1SessionsIdEventsQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>, TError = ErrorResponse>(id: string,
    params?: GetApiV1SessionsIdEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SessionsIdEventsQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>> = ({ signal }) => getApiV1SessionsIdEvents(id,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1SessionsIdEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>>
export type GetApiV1SessionsIdEventsQueryError = ErrorResponse


export function useGetApiV1SessionsIdEvents<TData = Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>, TError = ErrorResponse>(
 id: string,
    params: undefined |  GetApiV1SessionsIdEventsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>,
          TError,
          Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1SessionsIdEvents<TData = Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>, TError = ErrorResponse>(
 id: string,
    params?: GetApiV1SessionsIdEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>,
          TError,
          Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1SessionsIdEvents<TData = Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>, TError = ErrorResponse>(
 id: string,
    params?: GetApiV1SessionsIdEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List session events
 */

export function useGetApiV1SessionsIdEvents<TData = Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>, TError = ErrorResponse>(
 id: string,
    params?: GetApiV1SessionsIdEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1SessionsIdEvents>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1SessionsIdEventsQueryOptions(id,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new event for a session (e.g., page navigation, user interaction)
 * @summary Create a session event
 */
export const postApiV1SessionsIdEvents = (
    id: string,
    sessionEvent: SessionEvent,
 signal?: AbortSignal
) => {
      
      
      return customInstance<SessionEvent>(
      {url: `/api/v1/sessions/${id}/events`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sessionEvent, signal
    },
      );
    }
  


export const getPostApiV1SessionsIdEventsMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1SessionsIdEvents>>, TError,{id: string;data: SessionEvent}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1SessionsIdEvents>>, TError,{id: string;data: SessionEvent}, TContext> => {

const mutationKey = ['postApiV1SessionsIdEvents'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1SessionsIdEvents>>, {id: string;data: SessionEvent}> = (props) => {
          const {id,data} = props ?? {};

          return  postApiV1SessionsIdEvents(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SessionsIdEventsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1SessionsIdEvents>>>
    export type PostApiV1SessionsIdEventsMutationBody = SessionEvent
    export type PostApiV1SessionsIdEventsMutationError = ErrorResponse

    /**
 * @summary Create a session event
 */
export const usePostApiV1SessionsIdEvents = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1SessionsIdEvents>>, TError,{id: string;data: SessionEvent}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1SessionsIdEvents>>,
        TError,
        {id: string;data: SessionEvent},
        TContext
      > => {

      const mutationOptions = getPostApiV1SessionsIdEventsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    