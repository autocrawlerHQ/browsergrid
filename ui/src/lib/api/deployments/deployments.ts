/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * BrowserGrid API
 * BrowserGrid is a distributed browser automation platform using task queues for scalable browser session management.
 * OpenAPI spec version: 2.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiV1DeploymentsIdRunsParams,
  GetApiV1DeploymentsIdStats200,
  GetApiV1DeploymentsParams,
  GetApiV1RunsIdLogs200,
  GetApiV1RunsParams,
  InternalDeploymentsCreateDeploymentRequest,
  InternalDeploymentsCreateDeploymentRunRequest,
  InternalDeploymentsDeployment,
  InternalDeploymentsDeploymentListResponse,
  InternalDeploymentsDeploymentRun,
  InternalDeploymentsDeploymentRunListResponse,
  InternalDeploymentsErrorResponse,
  InternalDeploymentsMessageResponse,
  InternalDeploymentsUpdateDeploymentRequest
} from '.././model';

import { customInstance } from '.././mutator';




/**
 * Get a list of all deployments with optional filtering
 * @summary List deployments
 */
export const getApiV1Deployments = (
    params?: GetApiV1DeploymentsParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<InternalDeploymentsDeploymentListResponse>(
      {url: `/api/v1/deployments`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1DeploymentsQueryKey = (params?: GetApiV1DeploymentsParams,) => {
    return [`/api/v1/deployments`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1DeploymentsQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Deployments>>, TError = InternalDeploymentsErrorResponse>(params?: GetApiV1DeploymentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Deployments>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DeploymentsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Deployments>>> = ({ signal }) => getApiV1Deployments(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Deployments>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1DeploymentsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Deployments>>>
export type GetApiV1DeploymentsQueryError = InternalDeploymentsErrorResponse


export function useGetApiV1Deployments<TData = Awaited<ReturnType<typeof getApiV1Deployments>>, TError = InternalDeploymentsErrorResponse>(
 params: undefined |  GetApiV1DeploymentsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Deployments>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Deployments>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Deployments>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Deployments<TData = Awaited<ReturnType<typeof getApiV1Deployments>>, TError = InternalDeploymentsErrorResponse>(
 params?: GetApiV1DeploymentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Deployments>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Deployments>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Deployments>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Deployments<TData = Awaited<ReturnType<typeof getApiV1Deployments>>, TError = InternalDeploymentsErrorResponse>(
 params?: GetApiV1DeploymentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Deployments>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List deployments
 */

export function useGetApiV1Deployments<TData = Awaited<ReturnType<typeof getApiV1Deployments>>, TError = InternalDeploymentsErrorResponse>(
 params?: GetApiV1DeploymentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Deployments>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1DeploymentsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new deployment package with specified configuration
 * @summary Create a new deployment
 */
export const postApiV1Deployments = (
    internalDeploymentsCreateDeploymentRequest: InternalDeploymentsCreateDeploymentRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<InternalDeploymentsDeployment>(
      {url: `/api/v1/deployments`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: internalDeploymentsCreateDeploymentRequest, signal
    },
      );
    }
  


export const getPostApiV1DeploymentsMutationOptions = <TError = InternalDeploymentsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Deployments>>, TError,{data: InternalDeploymentsCreateDeploymentRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Deployments>>, TError,{data: InternalDeploymentsCreateDeploymentRequest}, TContext> => {

const mutationKey = ['postApiV1Deployments'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Deployments>>, {data: InternalDeploymentsCreateDeploymentRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Deployments(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1DeploymentsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Deployments>>>
    export type PostApiV1DeploymentsMutationBody = InternalDeploymentsCreateDeploymentRequest
    export type PostApiV1DeploymentsMutationError = InternalDeploymentsErrorResponse

    /**
 * @summary Create a new deployment
 */
export const usePostApiV1Deployments = <TError = InternalDeploymentsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Deployments>>, TError,{data: InternalDeploymentsCreateDeploymentRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Deployments>>,
        TError,
        {data: InternalDeploymentsCreateDeploymentRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1DeploymentsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get detailed information about a specific deployment
 * @summary Get a deployment
 */
export const getApiV1DeploymentsId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<InternalDeploymentsDeployment>(
      {url: `/api/v1/deployments/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1DeploymentsIdQueryKey = (id: string,) => {
    return [`/api/v1/deployments/${id}`] as const;
    }

    
export const getGetApiV1DeploymentsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1DeploymentsId>>, TError = InternalDeploymentsErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DeploymentsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1DeploymentsId>>> = ({ signal }) => getApiV1DeploymentsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1DeploymentsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1DeploymentsId>>>
export type GetApiV1DeploymentsIdQueryError = InternalDeploymentsErrorResponse


export function useGetApiV1DeploymentsId<TData = Awaited<ReturnType<typeof getApiV1DeploymentsId>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DeploymentsId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DeploymentsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DeploymentsId<TData = Awaited<ReturnType<typeof getApiV1DeploymentsId>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DeploymentsId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DeploymentsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DeploymentsId<TData = Awaited<ReturnType<typeof getApiV1DeploymentsId>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a deployment
 */

export function useGetApiV1DeploymentsId<TData = Awaited<ReturnType<typeof getApiV1DeploymentsId>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1DeploymentsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete a deployment and all its runs
 * @summary Delete a deployment
 */
export const deleteApiV1DeploymentsId = (
    id: string,
 ) => {
      
      
      return customInstance<InternalDeploymentsMessageResponse>(
      {url: `/api/v1/deployments/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiV1DeploymentsIdMutationOptions = <TError = InternalDeploymentsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1DeploymentsId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1DeploymentsId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiV1DeploymentsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1DeploymentsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiV1DeploymentsId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1DeploymentsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1DeploymentsId>>>
    
    export type DeleteApiV1DeploymentsIdMutationError = InternalDeploymentsErrorResponse

    /**
 * @summary Delete a deployment
 */
export const useDeleteApiV1DeploymentsId = <TError = InternalDeploymentsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1DeploymentsId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1DeploymentsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1DeploymentsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Update deployment metadata and configuration
 * @summary Update a deployment
 */
export const patchApiV1DeploymentsId = (
    id: string,
    internalDeploymentsUpdateDeploymentRequest: InternalDeploymentsUpdateDeploymentRequest,
 ) => {
      
      
      return customInstance<InternalDeploymentsDeployment>(
      {url: `/api/v1/deployments/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: internalDeploymentsUpdateDeploymentRequest
    },
      );
    }
  


export const getPatchApiV1DeploymentsIdMutationOptions = <TError = InternalDeploymentsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiV1DeploymentsId>>, TError,{id: string;data: InternalDeploymentsUpdateDeploymentRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchApiV1DeploymentsId>>, TError,{id: string;data: InternalDeploymentsUpdateDeploymentRequest}, TContext> => {

const mutationKey = ['patchApiV1DeploymentsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiV1DeploymentsId>>, {id: string;data: InternalDeploymentsUpdateDeploymentRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiV1DeploymentsId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiV1DeploymentsIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiV1DeploymentsId>>>
    export type PatchApiV1DeploymentsIdMutationBody = InternalDeploymentsUpdateDeploymentRequest
    export type PatchApiV1DeploymentsIdMutationError = InternalDeploymentsErrorResponse

    /**
 * @summary Update a deployment
 */
export const usePatchApiV1DeploymentsId = <TError = InternalDeploymentsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiV1DeploymentsId>>, TError,{id: string;data: InternalDeploymentsUpdateDeploymentRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchApiV1DeploymentsId>>,
        TError,
        {id: string;data: InternalDeploymentsUpdateDeploymentRequest},
        TContext
      > => {

      const mutationOptions = getPatchApiV1DeploymentsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get a list of runs for a specific deployment
 * @summary List deployment runs
 */
export const getApiV1DeploymentsIdRuns = (
    id: string,
    params?: GetApiV1DeploymentsIdRunsParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<InternalDeploymentsDeploymentRunListResponse>(
      {url: `/api/v1/deployments/${id}/runs`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1DeploymentsIdRunsQueryKey = (id: string,
    params?: GetApiV1DeploymentsIdRunsParams,) => {
    return [`/api/v1/deployments/${id}/runs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1DeploymentsIdRunsQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>, TError = InternalDeploymentsErrorResponse>(id: string,
    params?: GetApiV1DeploymentsIdRunsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DeploymentsIdRunsQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>> = ({ signal }) => getApiV1DeploymentsIdRuns(id,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1DeploymentsIdRunsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>>
export type GetApiV1DeploymentsIdRunsQueryError = InternalDeploymentsErrorResponse


export function useGetApiV1DeploymentsIdRuns<TData = Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>, TError = InternalDeploymentsErrorResponse>(
 id: string,
    params: undefined |  GetApiV1DeploymentsIdRunsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DeploymentsIdRuns<TData = Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>, TError = InternalDeploymentsErrorResponse>(
 id: string,
    params?: GetApiV1DeploymentsIdRunsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DeploymentsIdRuns<TData = Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>, TError = InternalDeploymentsErrorResponse>(
 id: string,
    params?: GetApiV1DeploymentsIdRunsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List deployment runs
 */

export function useGetApiV1DeploymentsIdRuns<TData = Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>, TError = InternalDeploymentsErrorResponse>(
 id: string,
    params?: GetApiV1DeploymentsIdRunsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsIdRuns>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1DeploymentsIdRunsQueryOptions(id,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Trigger a manual run of a deployment
 * @summary Create a new deployment run
 */
export const postApiV1DeploymentsIdRuns = (
    id: string,
    internalDeploymentsCreateDeploymentRunRequest: InternalDeploymentsCreateDeploymentRunRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<InternalDeploymentsDeploymentRun>(
      {url: `/api/v1/deployments/${id}/runs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: internalDeploymentsCreateDeploymentRunRequest, signal
    },
      );
    }
  


export const getPostApiV1DeploymentsIdRunsMutationOptions = <TError = InternalDeploymentsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1DeploymentsIdRuns>>, TError,{id: string;data: InternalDeploymentsCreateDeploymentRunRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1DeploymentsIdRuns>>, TError,{id: string;data: InternalDeploymentsCreateDeploymentRunRequest}, TContext> => {

const mutationKey = ['postApiV1DeploymentsIdRuns'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1DeploymentsIdRuns>>, {id: string;data: InternalDeploymentsCreateDeploymentRunRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  postApiV1DeploymentsIdRuns(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1DeploymentsIdRunsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1DeploymentsIdRuns>>>
    export type PostApiV1DeploymentsIdRunsMutationBody = InternalDeploymentsCreateDeploymentRunRequest
    export type PostApiV1DeploymentsIdRunsMutationError = InternalDeploymentsErrorResponse

    /**
 * @summary Create a new deployment run
 */
export const usePostApiV1DeploymentsIdRuns = <TError = InternalDeploymentsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1DeploymentsIdRuns>>, TError,{id: string;data: InternalDeploymentsCreateDeploymentRunRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1DeploymentsIdRuns>>,
        TError,
        {id: string;data: InternalDeploymentsCreateDeploymentRunRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1DeploymentsIdRunsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get detailed statistics for a deployment
 * @summary Get deployment statistics
 */
export const getApiV1DeploymentsIdStats = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiV1DeploymentsIdStats200>(
      {url: `/api/v1/deployments/${id}/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1DeploymentsIdStatsQueryKey = (id: string,) => {
    return [`/api/v1/deployments/${id}/stats`] as const;
    }

    
export const getGetApiV1DeploymentsIdStatsQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>, TError = InternalDeploymentsErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DeploymentsIdStatsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>> = ({ signal }) => getApiV1DeploymentsIdStats(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1DeploymentsIdStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>>
export type GetApiV1DeploymentsIdStatsQueryError = InternalDeploymentsErrorResponse


export function useGetApiV1DeploymentsIdStats<TData = Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DeploymentsIdStats<TData = Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DeploymentsIdStats<TData = Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get deployment statistics
 */

export function useGetApiV1DeploymentsIdStats<TData = Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DeploymentsIdStats>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1DeploymentsIdStatsQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get a list of all deployment runs across all deployments
 * @summary List all deployment runs
 */
export const getApiV1Runs = (
    params?: GetApiV1RunsParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<InternalDeploymentsDeploymentRunListResponse>(
      {url: `/api/v1/runs`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1RunsQueryKey = (params?: GetApiV1RunsParams,) => {
    return [`/api/v1/runs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1RunsQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Runs>>, TError = InternalDeploymentsErrorResponse>(params?: GetApiV1RunsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Runs>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1RunsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Runs>>> = ({ signal }) => getApiV1Runs(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Runs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1RunsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Runs>>>
export type GetApiV1RunsQueryError = InternalDeploymentsErrorResponse


export function useGetApiV1Runs<TData = Awaited<ReturnType<typeof getApiV1Runs>>, TError = InternalDeploymentsErrorResponse>(
 params: undefined |  GetApiV1RunsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Runs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Runs>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Runs>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Runs<TData = Awaited<ReturnType<typeof getApiV1Runs>>, TError = InternalDeploymentsErrorResponse>(
 params?: GetApiV1RunsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Runs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Runs>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Runs>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Runs<TData = Awaited<ReturnType<typeof getApiV1Runs>>, TError = InternalDeploymentsErrorResponse>(
 params?: GetApiV1RunsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Runs>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List all deployment runs
 */

export function useGetApiV1Runs<TData = Awaited<ReturnType<typeof getApiV1Runs>>, TError = InternalDeploymentsErrorResponse>(
 params?: GetApiV1RunsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Runs>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1RunsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get detailed information about a specific deployment run
 * @summary Get a deployment run
 */
export const getApiV1RunsId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<InternalDeploymentsDeploymentRun>(
      {url: `/api/v1/runs/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1RunsIdQueryKey = (id: string,) => {
    return [`/api/v1/runs/${id}`] as const;
    }

    
export const getGetApiV1RunsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1RunsId>>, TError = InternalDeploymentsErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RunsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1RunsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1RunsId>>> = ({ signal }) => getApiV1RunsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1RunsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1RunsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1RunsId>>>
export type GetApiV1RunsIdQueryError = InternalDeploymentsErrorResponse


export function useGetApiV1RunsId<TData = Awaited<ReturnType<typeof getApiV1RunsId>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RunsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RunsId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1RunsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1RunsId<TData = Awaited<ReturnType<typeof getApiV1RunsId>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RunsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RunsId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1RunsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1RunsId<TData = Awaited<ReturnType<typeof getApiV1RunsId>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RunsId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a deployment run
 */

export function useGetApiV1RunsId<TData = Awaited<ReturnType<typeof getApiV1RunsId>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RunsId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1RunsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete a deployment run
 * @summary Delete a deployment run
 */
export const deleteApiV1RunsId = (
    id: string,
 ) => {
      
      
      return customInstance<InternalDeploymentsMessageResponse>(
      {url: `/api/v1/runs/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiV1RunsIdMutationOptions = <TError = InternalDeploymentsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1RunsId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1RunsId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiV1RunsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1RunsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiV1RunsId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1RunsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1RunsId>>>
    
    export type DeleteApiV1RunsIdMutationError = InternalDeploymentsErrorResponse

    /**
 * @summary Delete a deployment run
 */
export const useDeleteApiV1RunsId = <TError = InternalDeploymentsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1RunsId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1RunsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1RunsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get logs for a specific deployment run
 * @summary Get deployment run logs
 */
export const getApiV1RunsIdLogs = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiV1RunsIdLogs200>(
      {url: `/api/v1/runs/${id}/logs`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1RunsIdLogsQueryKey = (id: string,) => {
    return [`/api/v1/runs/${id}/logs`] as const;
    }

    
export const getGetApiV1RunsIdLogsQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1RunsIdLogs>>, TError = InternalDeploymentsErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RunsIdLogs>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1RunsIdLogsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1RunsIdLogs>>> = ({ signal }) => getApiV1RunsIdLogs(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1RunsIdLogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1RunsIdLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1RunsIdLogs>>>
export type GetApiV1RunsIdLogsQueryError = InternalDeploymentsErrorResponse


export function useGetApiV1RunsIdLogs<TData = Awaited<ReturnType<typeof getApiV1RunsIdLogs>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RunsIdLogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RunsIdLogs>>,
          TError,
          Awaited<ReturnType<typeof getApiV1RunsIdLogs>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1RunsIdLogs<TData = Awaited<ReturnType<typeof getApiV1RunsIdLogs>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RunsIdLogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RunsIdLogs>>,
          TError,
          Awaited<ReturnType<typeof getApiV1RunsIdLogs>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1RunsIdLogs<TData = Awaited<ReturnType<typeof getApiV1RunsIdLogs>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RunsIdLogs>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get deployment run logs
 */

export function useGetApiV1RunsIdLogs<TData = Awaited<ReturnType<typeof getApiV1RunsIdLogs>>, TError = InternalDeploymentsErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RunsIdLogs>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1RunsIdLogsQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



