/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * BrowserGrid API
 * BrowserGrid is a distributed browser automation platform that provides scalable browser sessions and worker pool management.
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ErrorResponse,
  GetApiV1WorkpoolsIdStats200
} from '.././model';

import { customInstance } from '.././mutator';




/**
 * Get detailed statistics and metrics for a specific work pool
 * @summary Get work pool statistics
 */
export const getApiV1WorkpoolsIdStats = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiV1WorkpoolsIdStats200>(
      {url: `/api/v1/workpools/${id}/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1WorkpoolsIdStatsQueryKey = (id: string,) => {
    return [`/api/v1/workpools/${id}/stats`] as const;
    }

    
export const getGetApiV1WorkpoolsIdStatsQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1WorkpoolsIdStatsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>> = ({ signal }) => getApiV1WorkpoolsIdStats(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1WorkpoolsIdStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>>
export type GetApiV1WorkpoolsIdStatsQueryError = ErrorResponse


export function useGetApiV1WorkpoolsIdStats<TData = Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>,
          TError,
          Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1WorkpoolsIdStats<TData = Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>,
          TError,
          Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1WorkpoolsIdStats<TData = Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get work pool statistics
 */

export function useGetApiV1WorkpoolsIdStats<TData = Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1WorkpoolsIdStats>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1WorkpoolsIdStatsQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



