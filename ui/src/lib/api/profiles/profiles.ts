/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * BrowserGrid API
 * BrowserGrid is a distributed browser automation platform using task queues for scalable browser session management.
 * OpenAPI spec version: 2.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiV1ProfilesParams,
  InternalProfilesCreateProfileRequest,
  InternalProfilesErrorResponse,
  InternalProfilesMessageResponse,
  InternalProfilesProfile,
  InternalProfilesProfileListResponse,
  InternalProfilesUpdateProfileRequest,
  PostApiV1ProfilesImportBody
} from '.././model';

import { customInstance } from '.././mutator';




/**
 * Get a paginated list of browser profiles
 * @summary List profiles
 */
export const getApiV1Profiles = (
    params?: GetApiV1ProfilesParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<InternalProfilesProfileListResponse>(
      {url: `/api/v1/profiles`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1ProfilesQueryKey = (params?: GetApiV1ProfilesParams,) => {
    return [`/api/v1/profiles`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1ProfilesQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Profiles>>, TError = InternalProfilesErrorResponse>(params?: GetApiV1ProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Profiles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ProfilesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Profiles>>> = ({ signal }) => getApiV1Profiles(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Profiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1ProfilesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Profiles>>>
export type GetApiV1ProfilesQueryError = InternalProfilesErrorResponse


export function useGetApiV1Profiles<TData = Awaited<ReturnType<typeof getApiV1Profiles>>, TError = InternalProfilesErrorResponse>(
 params: undefined |  GetApiV1ProfilesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Profiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Profiles>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Profiles>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Profiles<TData = Awaited<ReturnType<typeof getApiV1Profiles>>, TError = InternalProfilesErrorResponse>(
 params?: GetApiV1ProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Profiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Profiles>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Profiles>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Profiles<TData = Awaited<ReturnType<typeof getApiV1Profiles>>, TError = InternalProfilesErrorResponse>(
 params?: GetApiV1ProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Profiles>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List profiles
 */

export function useGetApiV1Profiles<TData = Awaited<ReturnType<typeof getApiV1Profiles>>, TError = InternalProfilesErrorResponse>(
 params?: GetApiV1ProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Profiles>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1ProfilesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new browser profile for saving and reusing browser state
 * @summary Create a new profile
 */
export const postApiV1Profiles = (
    internalProfilesCreateProfileRequest: InternalProfilesCreateProfileRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<InternalProfilesProfile>(
      {url: `/api/v1/profiles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: internalProfilesCreateProfileRequest, signal
    },
      );
    }
  


export const getPostApiV1ProfilesMutationOptions = <TError = InternalProfilesErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Profiles>>, TError,{data: InternalProfilesCreateProfileRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Profiles>>, TError,{data: InternalProfilesCreateProfileRequest}, TContext> => {

const mutationKey = ['postApiV1Profiles'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Profiles>>, {data: InternalProfilesCreateProfileRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Profiles(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ProfilesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Profiles>>>
    export type PostApiV1ProfilesMutationBody = InternalProfilesCreateProfileRequest
    export type PostApiV1ProfilesMutationError = InternalProfilesErrorResponse

    /**
 * @summary Create a new profile
 */
export const usePostApiV1Profiles = <TError = InternalProfilesErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Profiles>>, TError,{data: InternalProfilesCreateProfileRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Profiles>>,
        TError,
        {data: InternalProfilesCreateProfileRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1ProfilesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Import a browser profile from a ZIP archive
 * @summary Import a profile
 */
export const postApiV1ProfilesImport = (
    postApiV1ProfilesImportBody: PostApiV1ProfilesImportBody,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append(`file`, postApiV1ProfilesImportBody.file)
formData.append(`name`, postApiV1ProfilesImportBody.name)
if(postApiV1ProfilesImportBody.description !== undefined) {
 formData.append(`description`, postApiV1ProfilesImportBody.description)
 }
formData.append(`browser`, postApiV1ProfilesImportBody.browser)

      return customInstance<InternalProfilesProfile>(
      {url: `/api/v1/profiles/import`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getPostApiV1ProfilesImportMutationOptions = <TError = InternalProfilesErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1ProfilesImport>>, TError,{data: PostApiV1ProfilesImportBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1ProfilesImport>>, TError,{data: PostApiV1ProfilesImportBody}, TContext> => {

const mutationKey = ['postApiV1ProfilesImport'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1ProfilesImport>>, {data: PostApiV1ProfilesImportBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1ProfilesImport(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ProfilesImportMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1ProfilesImport>>>
    export type PostApiV1ProfilesImportMutationBody = PostApiV1ProfilesImportBody
    export type PostApiV1ProfilesImportMutationError = InternalProfilesErrorResponse

    /**
 * @summary Import a profile
 */
export const usePostApiV1ProfilesImport = <TError = InternalProfilesErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1ProfilesImport>>, TError,{data: PostApiV1ProfilesImportBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1ProfilesImport>>,
        TError,
        {data: PostApiV1ProfilesImportBody},
        TContext
      > => {

      const mutationOptions = getPostApiV1ProfilesImportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get detailed information about a specific profile
 * @summary Get a profile
 */
export const getApiV1ProfilesId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<InternalProfilesProfile>(
      {url: `/api/v1/profiles/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1ProfilesIdQueryKey = (id: string,) => {
    return [`/api/v1/profiles/${id}`] as const;
    }

    
export const getGetApiV1ProfilesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1ProfilesId>>, TError = InternalProfilesErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProfilesId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ProfilesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1ProfilesId>>> = ({ signal }) => getApiV1ProfilesId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProfilesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1ProfilesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1ProfilesId>>>
export type GetApiV1ProfilesIdQueryError = InternalProfilesErrorResponse


export function useGetApiV1ProfilesId<TData = Awaited<ReturnType<typeof getApiV1ProfilesId>>, TError = InternalProfilesErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProfilesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ProfilesId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ProfilesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ProfilesId<TData = Awaited<ReturnType<typeof getApiV1ProfilesId>>, TError = InternalProfilesErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProfilesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ProfilesId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ProfilesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ProfilesId<TData = Awaited<ReturnType<typeof getApiV1ProfilesId>>, TError = InternalProfilesErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProfilesId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a profile
 */

export function useGetApiV1ProfilesId<TData = Awaited<ReturnType<typeof getApiV1ProfilesId>>, TError = InternalProfilesErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProfilesId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1ProfilesIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete a profile and its associated data. Cannot delete profiles with active sessions.
 * @summary Delete a profile
 */
export const deleteApiV1ProfilesId = (
    id: string,
 ) => {
      
      
      return customInstance<InternalProfilesMessageResponse>(
      {url: `/api/v1/profiles/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiV1ProfilesIdMutationOptions = <TError = InternalProfilesErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1ProfilesId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1ProfilesId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiV1ProfilesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1ProfilesId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiV1ProfilesId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1ProfilesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1ProfilesId>>>
    
    export type DeleteApiV1ProfilesIdMutationError = InternalProfilesErrorResponse

    /**
 * @summary Delete a profile
 */
export const useDeleteApiV1ProfilesId = <TError = InternalProfilesErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1ProfilesId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1ProfilesId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1ProfilesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Update profile metadata (name, description)
 * @summary Update a profile
 */
export const patchApiV1ProfilesId = (
    id: string,
    internalProfilesUpdateProfileRequest: InternalProfilesUpdateProfileRequest,
 ) => {
      
      
      return customInstance<InternalProfilesProfile>(
      {url: `/api/v1/profiles/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: internalProfilesUpdateProfileRequest
    },
      );
    }
  


export const getPatchApiV1ProfilesIdMutationOptions = <TError = InternalProfilesErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiV1ProfilesId>>, TError,{id: string;data: InternalProfilesUpdateProfileRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchApiV1ProfilesId>>, TError,{id: string;data: InternalProfilesUpdateProfileRequest}, TContext> => {

const mutationKey = ['patchApiV1ProfilesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiV1ProfilesId>>, {id: string;data: InternalProfilesUpdateProfileRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiV1ProfilesId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiV1ProfilesIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiV1ProfilesId>>>
    export type PatchApiV1ProfilesIdMutationBody = InternalProfilesUpdateProfileRequest
    export type PatchApiV1ProfilesIdMutationError = InternalProfilesErrorResponse

    /**
 * @summary Update a profile
 */
export const usePatchApiV1ProfilesId = <TError = InternalProfilesErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiV1ProfilesId>>, TError,{id: string;data: InternalProfilesUpdateProfileRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchApiV1ProfilesId>>,
        TError,
        {id: string;data: InternalProfilesUpdateProfileRequest},
        TContext
      > => {

      const mutationOptions = getPatchApiV1ProfilesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Export a browser profile as a ZIP archive
 * @summary Export a profile
 */
export const getApiV1ProfilesIdExport = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/profiles/${id}/export`, method: 'GET',
        responseType: 'blob', signal
    },
      );
    }
  

export const getGetApiV1ProfilesIdExportQueryKey = (id: string,) => {
    return [`/api/v1/profiles/${id}/export`] as const;
    }

    
export const getGetApiV1ProfilesIdExportQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>, TError = InternalProfilesErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ProfilesIdExportQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>> = ({ signal }) => getApiV1ProfilesIdExport(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1ProfilesIdExportQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>>
export type GetApiV1ProfilesIdExportQueryError = InternalProfilesErrorResponse


export function useGetApiV1ProfilesIdExport<TData = Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>, TError = InternalProfilesErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ProfilesIdExport<TData = Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>, TError = InternalProfilesErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ProfilesIdExport<TData = Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>, TError = InternalProfilesErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Export a profile
 */

export function useGetApiV1ProfilesIdExport<TData = Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>, TError = InternalProfilesErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProfilesIdExport>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1ProfilesIdExportQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



