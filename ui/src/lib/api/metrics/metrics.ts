/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * BrowserGrid API
 * BrowserGrid is a distributed browser automation platform using task queues for scalable browser session management.
 * OpenAPI spec version: 2.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  ErrorResponse,
  SessionMetrics,
  SessionMetricsBody
} from '.././model';

import { customInstance } from '.././mutator';




/**
 * Create performance metrics for a browser session. The session ID can be provided in the URL path or in the request body.
 * @summary Create session metrics
 */
export const postApiV1Metrics = (
    sessionMetricsBody: SessionMetricsBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<SessionMetrics>(
      {url: `/api/v1/metrics`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sessionMetricsBody, signal
    },
      );
    }
  


export const getPostApiV1MetricsMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Metrics>>, TError,{data: SessionMetricsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Metrics>>, TError,{data: SessionMetricsBody}, TContext> => {

const mutationKey = ['postApiV1Metrics'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Metrics>>, {data: SessionMetricsBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Metrics(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1MetricsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Metrics>>>
    export type PostApiV1MetricsMutationBody = SessionMetricsBody
    export type PostApiV1MetricsMutationError = ErrorResponse

    /**
 * @summary Create session metrics
 */
export const usePostApiV1Metrics = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Metrics>>, TError,{data: SessionMetricsBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Metrics>>,
        TError,
        {data: SessionMetricsBody},
        TContext
      > => {

      const mutationOptions = getPostApiV1MetricsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Create performance metrics for a browser session. The session ID can be provided in the URL path or in the request body.
 * @summary Create session metrics
 */
export const postApiV1SessionsIdMetrics = (
    id: string,
    sessionMetricsBody: SessionMetricsBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<SessionMetrics>(
      {url: `/api/v1/sessions/${id}/metrics`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sessionMetricsBody, signal
    },
      );
    }
  


export const getPostApiV1SessionsIdMetricsMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1SessionsIdMetrics>>, TError,{id: string;data: SessionMetricsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1SessionsIdMetrics>>, TError,{id: string;data: SessionMetricsBody}, TContext> => {

const mutationKey = ['postApiV1SessionsIdMetrics'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1SessionsIdMetrics>>, {id: string;data: SessionMetricsBody}> = (props) => {
          const {id,data} = props ?? {};

          return  postApiV1SessionsIdMetrics(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SessionsIdMetricsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1SessionsIdMetrics>>>
    export type PostApiV1SessionsIdMetricsMutationBody = SessionMetricsBody
    export type PostApiV1SessionsIdMetricsMutationError = ErrorResponse

    /**
 * @summary Create session metrics
 */
export const usePostApiV1SessionsIdMetrics = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1SessionsIdMetrics>>, TError,{id: string;data: SessionMetricsBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1SessionsIdMetrics>>,
        TError,
        {id: string;data: SessionMetricsBody},
        TContext
      > => {

      const mutationOptions = getPostApiV1SessionsIdMetricsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    