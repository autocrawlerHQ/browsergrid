/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * BrowserGrid API
 * BrowserGrid is a distributed browser automation platform using task queues for scalable browser session management.
 * OpenAPI spec version: 2.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AsynqQueueInfo,
  AsynqSchedulerEntry,
  DeleteApiV1MonitoringQueuesNameArchived200,
  DeleteApiV1MonitoringQueuesNameRetry200,
  GetApiV1MonitoringHealth200,
  GetApiV1MonitoringHealth503,
  GetApiV1MonitoringMetricsParams,
  GetApiV1MonitoringQueues200,
  InternalMonitoringErrorResponse,
  InternalMonitoringMessageResponse,
  InternalMonitoringQueueStatsExtended,
  InternalMonitoringServerInfoSnakeCase,
  InternalMonitoringSystemMetrics,
  MonitoringInfo,
  TaskInfo
} from '.././model';

import { customInstance } from '.././mutator';




/**
 * Get comprehensive monitoring information including servers, queues, and health
 * @summary Get monitoring information
 */
export const getApiV1Monitoring = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<MonitoringInfo>(
      {url: `/api/v1/monitoring`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1MonitoringQueryKey = () => {
    return [`/api/v1/monitoring`] as const;
    }

    
export const getGetApiV1MonitoringQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Monitoring>>, TError = InternalMonitoringErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Monitoring>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MonitoringQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Monitoring>>> = ({ signal }) => getApiV1Monitoring(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Monitoring>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1MonitoringQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Monitoring>>>
export type GetApiV1MonitoringQueryError = InternalMonitoringErrorResponse


export function useGetApiV1Monitoring<TData = Awaited<ReturnType<typeof getApiV1Monitoring>>, TError = InternalMonitoringErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Monitoring>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Monitoring>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Monitoring>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Monitoring<TData = Awaited<ReturnType<typeof getApiV1Monitoring>>, TError = InternalMonitoringErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Monitoring>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Monitoring>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Monitoring>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Monitoring<TData = Awaited<ReturnType<typeof getApiV1Monitoring>>, TError = InternalMonitoringErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Monitoring>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get monitoring information
 */

export function useGetApiV1Monitoring<TData = Awaited<ReturnType<typeof getApiV1Monitoring>>, TError = InternalMonitoringErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Monitoring>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1MonitoringQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get health status of the worker system
 * @summary Get health status
 */
export const getApiV1MonitoringHealth = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiV1MonitoringHealth200>(
      {url: `/api/v1/monitoring/health`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1MonitoringHealthQueryKey = () => {
    return [`/api/v1/monitoring/health`] as const;
    }

    
export const getGetApiV1MonitoringHealthQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1MonitoringHealth>>, TError = GetApiV1MonitoringHealth503>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringHealth>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MonitoringHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1MonitoringHealth>>> = ({ signal }) => getApiV1MonitoringHealth(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringHealth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1MonitoringHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1MonitoringHealth>>>
export type GetApiV1MonitoringHealthQueryError = GetApiV1MonitoringHealth503


export function useGetApiV1MonitoringHealth<TData = Awaited<ReturnType<typeof getApiV1MonitoringHealth>>, TError = GetApiV1MonitoringHealth503>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringHealth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringHealth>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringHealth>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringHealth<TData = Awaited<ReturnType<typeof getApiV1MonitoringHealth>>, TError = GetApiV1MonitoringHealth503>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringHealth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringHealth>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringHealth>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringHealth<TData = Awaited<ReturnType<typeof getApiV1MonitoringHealth>>, TError = GetApiV1MonitoringHealth503>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringHealth>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get health status
 */

export function useGetApiV1MonitoringHealth<TData = Awaited<ReturnType<typeof getApiV1MonitoringHealth>>, TError = GetApiV1MonitoringHealth503>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringHealth>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1MonitoringHealthQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get time-series metrics for tasks processed, failed, and error rate
 * @summary Get time-series metrics
 */
export const getApiV1MonitoringMetrics = (
    params?: GetApiV1MonitoringMetricsParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<InternalMonitoringSystemMetrics>(
      {url: `/api/v1/monitoring/metrics`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1MonitoringMetricsQueryKey = (params?: GetApiV1MonitoringMetricsParams,) => {
    return [`/api/v1/monitoring/metrics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1MonitoringMetricsQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>, TError = InternalMonitoringErrorResponse>(params?: GetApiV1MonitoringMetricsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MonitoringMetricsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>> = ({ signal }) => getApiV1MonitoringMetrics(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1MonitoringMetricsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>>
export type GetApiV1MonitoringMetricsQueryError = InternalMonitoringErrorResponse


export function useGetApiV1MonitoringMetrics<TData = Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>, TError = InternalMonitoringErrorResponse>(
 params: undefined |  GetApiV1MonitoringMetricsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringMetrics<TData = Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>, TError = InternalMonitoringErrorResponse>(
 params?: GetApiV1MonitoringMetricsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringMetrics<TData = Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>, TError = InternalMonitoringErrorResponse>(
 params?: GetApiV1MonitoringMetricsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get time-series metrics
 */

export function useGetApiV1MonitoringMetrics<TData = Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>, TError = InternalMonitoringErrorResponse>(
 params?: GetApiV1MonitoringMetricsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringMetrics>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1MonitoringMetricsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get statistics for all queues
 * @summary Get queue statistics
 */
export const getApiV1MonitoringQueues = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiV1MonitoringQueues200>(
      {url: `/api/v1/monitoring/queues`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1MonitoringQueuesQueryKey = () => {
    return [`/api/v1/monitoring/queues`] as const;
    }

    
export const getGetApiV1MonitoringQueuesQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1MonitoringQueues>>, TError = InternalMonitoringErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueues>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MonitoringQueuesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1MonitoringQueues>>> = ({ signal }) => getApiV1MonitoringQueues(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueues>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1MonitoringQueuesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1MonitoringQueues>>>
export type GetApiV1MonitoringQueuesQueryError = InternalMonitoringErrorResponse


export function useGetApiV1MonitoringQueues<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueues>>, TError = InternalMonitoringErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueues>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringQueues>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringQueues>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringQueues<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueues>>, TError = InternalMonitoringErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueues>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringQueues>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringQueues>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringQueues<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueues>>, TError = InternalMonitoringErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueues>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get queue statistics
 */

export function useGetApiV1MonitoringQueues<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueues>>, TError = InternalMonitoringErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueues>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1MonitoringQueuesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get extended statistics for all queues including memory usage and error rates
 * @summary Get extended queue statistics
 */
export const getApiV1MonitoringQueuesExtended = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<InternalMonitoringQueueStatsExtended[]>(
      {url: `/api/v1/monitoring/queues/extended`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1MonitoringQueuesExtendedQueryKey = () => {
    return [`/api/v1/monitoring/queues/extended`] as const;
    }

    
export const getGetApiV1MonitoringQueuesExtendedQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>, TError = InternalMonitoringErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MonitoringQueuesExtendedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>> = ({ signal }) => getApiV1MonitoringQueuesExtended(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1MonitoringQueuesExtendedQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>>
export type GetApiV1MonitoringQueuesExtendedQueryError = InternalMonitoringErrorResponse


export function useGetApiV1MonitoringQueuesExtended<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>, TError = InternalMonitoringErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringQueuesExtended<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>, TError = InternalMonitoringErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringQueuesExtended<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>, TError = InternalMonitoringErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get extended queue statistics
 */

export function useGetApiV1MonitoringQueuesExtended<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>, TError = InternalMonitoringErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesExtended>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1MonitoringQueuesExtendedQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get detailed information about a specific queue
 * @summary Get queue details
 */
export const getApiV1MonitoringQueuesName = (
    name: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<AsynqQueueInfo>(
      {url: `/api/v1/monitoring/queues/${name}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1MonitoringQueuesNameQueryKey = (name: string,) => {
    return [`/api/v1/monitoring/queues/${name}`] as const;
    }

    
export const getGetApiV1MonitoringQueuesNameQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>, TError = InternalMonitoringErrorResponse>(name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MonitoringQueuesNameQueryKey(name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>> = ({ signal }) => getApiV1MonitoringQueuesName(name, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(name),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1MonitoringQueuesNameQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>>
export type GetApiV1MonitoringQueuesNameQueryError = InternalMonitoringErrorResponse


export function useGetApiV1MonitoringQueuesName<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>, TError = InternalMonitoringErrorResponse>(
 name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringQueuesName<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>, TError = InternalMonitoringErrorResponse>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringQueuesName<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>, TError = InternalMonitoringErrorResponse>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get queue details
 */

export function useGetApiV1MonitoringQueuesName<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>, TError = InternalMonitoringErrorResponse>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesName>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1MonitoringQueuesNameQueryOptions(name,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete all archived (failed) tasks from a queue
 * @summary Delete archived tasks
 */
export const deleteApiV1MonitoringQueuesNameArchived = (
    name: string,
 ) => {
      
      
      return customInstance<DeleteApiV1MonitoringQueuesNameArchived200>(
      {url: `/api/v1/monitoring/queues/${name}/archived`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiV1MonitoringQueuesNameArchivedMutationOptions = <TError = InternalMonitoringErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1MonitoringQueuesNameArchived>>, TError,{name: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1MonitoringQueuesNameArchived>>, TError,{name: string}, TContext> => {

const mutationKey = ['deleteApiV1MonitoringQueuesNameArchived'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1MonitoringQueuesNameArchived>>, {name: string}> = (props) => {
          const {name} = props ?? {};

          return  deleteApiV1MonitoringQueuesNameArchived(name,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1MonitoringQueuesNameArchivedMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1MonitoringQueuesNameArchived>>>
    
    export type DeleteApiV1MonitoringQueuesNameArchivedMutationError = InternalMonitoringErrorResponse

    /**
 * @summary Delete archived tasks
 */
export const useDeleteApiV1MonitoringQueuesNameArchived = <TError = InternalMonitoringErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1MonitoringQueuesNameArchived>>, TError,{name: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1MonitoringQueuesNameArchived>>,
        TError,
        {name: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1MonitoringQueuesNameArchivedMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Pause processing of a specific queue
 * @summary Pause queue
 */
export const postApiV1MonitoringQueuesNamePause = (
    name: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<InternalMonitoringMessageResponse>(
      {url: `/api/v1/monitoring/queues/${name}/pause`, method: 'POST', signal
    },
      );
    }
  


export const getPostApiV1MonitoringQueuesNamePauseMutationOptions = <TError = InternalMonitoringErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1MonitoringQueuesNamePause>>, TError,{name: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1MonitoringQueuesNamePause>>, TError,{name: string}, TContext> => {

const mutationKey = ['postApiV1MonitoringQueuesNamePause'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1MonitoringQueuesNamePause>>, {name: string}> = (props) => {
          const {name} = props ?? {};

          return  postApiV1MonitoringQueuesNamePause(name,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1MonitoringQueuesNamePauseMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1MonitoringQueuesNamePause>>>
    
    export type PostApiV1MonitoringQueuesNamePauseMutationError = InternalMonitoringErrorResponse

    /**
 * @summary Pause queue
 */
export const usePostApiV1MonitoringQueuesNamePause = <TError = InternalMonitoringErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1MonitoringQueuesNamePause>>, TError,{name: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1MonitoringQueuesNamePause>>,
        TError,
        {name: string},
        TContext
      > => {

      const mutationOptions = getPostApiV1MonitoringQueuesNamePauseMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Delete all retry tasks from a queue
 * @summary Delete retry tasks
 */
export const deleteApiV1MonitoringQueuesNameRetry = (
    name: string,
 ) => {
      
      
      return customInstance<DeleteApiV1MonitoringQueuesNameRetry200>(
      {url: `/api/v1/monitoring/queues/${name}/retry`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiV1MonitoringQueuesNameRetryMutationOptions = <TError = InternalMonitoringErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1MonitoringQueuesNameRetry>>, TError,{name: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1MonitoringQueuesNameRetry>>, TError,{name: string}, TContext> => {

const mutationKey = ['deleteApiV1MonitoringQueuesNameRetry'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1MonitoringQueuesNameRetry>>, {name: string}> = (props) => {
          const {name} = props ?? {};

          return  deleteApiV1MonitoringQueuesNameRetry(name,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1MonitoringQueuesNameRetryMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1MonitoringQueuesNameRetry>>>
    
    export type DeleteApiV1MonitoringQueuesNameRetryMutationError = InternalMonitoringErrorResponse

    /**
 * @summary Delete retry tasks
 */
export const useDeleteApiV1MonitoringQueuesNameRetry = <TError = InternalMonitoringErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1MonitoringQueuesNameRetry>>, TError,{name: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1MonitoringQueuesNameRetry>>,
        TError,
        {name: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1MonitoringQueuesNameRetryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get sample of tasks in various states for a queue
 * @summary Get queue tasks
 */
export const getApiV1MonitoringQueuesNameTasks = (
    name: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<TaskInfo>(
      {url: `/api/v1/monitoring/queues/${name}/tasks`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1MonitoringQueuesNameTasksQueryKey = (name: string,) => {
    return [`/api/v1/monitoring/queues/${name}/tasks`] as const;
    }

    
export const getGetApiV1MonitoringQueuesNameTasksQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>, TError = InternalMonitoringErrorResponse>(name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MonitoringQueuesNameTasksQueryKey(name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>> = ({ signal }) => getApiV1MonitoringQueuesNameTasks(name, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(name),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1MonitoringQueuesNameTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>>
export type GetApiV1MonitoringQueuesNameTasksQueryError = InternalMonitoringErrorResponse


export function useGetApiV1MonitoringQueuesNameTasks<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>, TError = InternalMonitoringErrorResponse>(
 name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringQueuesNameTasks<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>, TError = InternalMonitoringErrorResponse>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringQueuesNameTasks<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>, TError = InternalMonitoringErrorResponse>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get queue tasks
 */

export function useGetApiV1MonitoringQueuesNameTasks<TData = Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>, TError = InternalMonitoringErrorResponse>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringQueuesNameTasks>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1MonitoringQueuesNameTasksQueryOptions(name,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Resume processing of a paused queue
 * @summary Unpause queue
 */
export const postApiV1MonitoringQueuesNameUnpause = (
    name: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<InternalMonitoringMessageResponse>(
      {url: `/api/v1/monitoring/queues/${name}/unpause`, method: 'POST', signal
    },
      );
    }
  


export const getPostApiV1MonitoringQueuesNameUnpauseMutationOptions = <TError = InternalMonitoringErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1MonitoringQueuesNameUnpause>>, TError,{name: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1MonitoringQueuesNameUnpause>>, TError,{name: string}, TContext> => {

const mutationKey = ['postApiV1MonitoringQueuesNameUnpause'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1MonitoringQueuesNameUnpause>>, {name: string}> = (props) => {
          const {name} = props ?? {};

          return  postApiV1MonitoringQueuesNameUnpause(name,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1MonitoringQueuesNameUnpauseMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1MonitoringQueuesNameUnpause>>>
    
    export type PostApiV1MonitoringQueuesNameUnpauseMutationError = InternalMonitoringErrorResponse

    /**
 * @summary Unpause queue
 */
export const usePostApiV1MonitoringQueuesNameUnpause = <TError = InternalMonitoringErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1MonitoringQueuesNameUnpause>>, TError,{name: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1MonitoringQueuesNameUnpause>>,
        TError,
        {name: string},
        TContext
      > => {

      const mutationOptions = getPostApiV1MonitoringQueuesNameUnpauseMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get all scheduled and periodic tasks
 * @summary Get scheduler entries
 */
export const getApiV1MonitoringScheduler = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<AsynqSchedulerEntry[]>(
      {url: `/api/v1/monitoring/scheduler`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1MonitoringSchedulerQueryKey = () => {
    return [`/api/v1/monitoring/scheduler`] as const;
    }

    
export const getGetApiV1MonitoringSchedulerQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>, TError = InternalMonitoringErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MonitoringSchedulerQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>> = ({ signal }) => getApiV1MonitoringScheduler(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1MonitoringSchedulerQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>>
export type GetApiV1MonitoringSchedulerQueryError = InternalMonitoringErrorResponse


export function useGetApiV1MonitoringScheduler<TData = Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>, TError = InternalMonitoringErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringScheduler<TData = Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>, TError = InternalMonitoringErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringScheduler<TData = Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>, TError = InternalMonitoringErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get scheduler entries
 */

export function useGetApiV1MonitoringScheduler<TData = Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>, TError = InternalMonitoringErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringScheduler>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1MonitoringSchedulerQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get information about all Asynq servers (workers)
 * @summary Get server information
 */
export const getApiV1MonitoringServers = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<InternalMonitoringServerInfoSnakeCase[]>(
      {url: `/api/v1/monitoring/servers`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1MonitoringServersQueryKey = () => {
    return [`/api/v1/monitoring/servers`] as const;
    }

    
export const getGetApiV1MonitoringServersQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1MonitoringServers>>, TError = InternalMonitoringErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringServers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MonitoringServersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1MonitoringServers>>> = ({ signal }) => getApiV1MonitoringServers(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringServers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1MonitoringServersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1MonitoringServers>>>
export type GetApiV1MonitoringServersQueryError = InternalMonitoringErrorResponse


export function useGetApiV1MonitoringServers<TData = Awaited<ReturnType<typeof getApiV1MonitoringServers>>, TError = InternalMonitoringErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringServers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringServers>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringServers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringServers<TData = Awaited<ReturnType<typeof getApiV1MonitoringServers>>, TError = InternalMonitoringErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringServers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MonitoringServers>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MonitoringServers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MonitoringServers<TData = Awaited<ReturnType<typeof getApiV1MonitoringServers>>, TError = InternalMonitoringErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringServers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get server information
 */

export function useGetApiV1MonitoringServers<TData = Awaited<ReturnType<typeof getApiV1MonitoringServers>>, TError = InternalMonitoringErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MonitoringServers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1MonitoringServersQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



