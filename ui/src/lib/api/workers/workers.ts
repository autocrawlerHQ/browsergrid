/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * BrowserGrid API
 * BrowserGrid is a distributed browser automation platform that provides scalable browser sessions and worker pool management.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ErrorResponse,
  GetApiV1WorkersParams,
  MessageResponse,
  Worker,
  WorkerHeartbeatRequest,
  WorkerListResponse,
  WorkerPauseRequest
} from '.././model';

import { customInstance } from '.././mutator';




/**
 * Get a list of all workers with optional filtering
 * @summary List workers
 */
export const getApiV1Workers = (
    params?: GetApiV1WorkersParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<WorkerListResponse>(
      {url: `/api/v1/workers`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1WorkersQueryKey = (params?: GetApiV1WorkersParams,) => {
    return [`/api/v1/workers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1WorkersQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Workers>>, TError = ErrorResponse>(params?: GetApiV1WorkersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Workers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1WorkersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Workers>>> = ({ signal }) => getApiV1Workers(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Workers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1WorkersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Workers>>>
export type GetApiV1WorkersQueryError = ErrorResponse


export function useGetApiV1Workers<TData = Awaited<ReturnType<typeof getApiV1Workers>>, TError = ErrorResponse>(
 params: undefined |  GetApiV1WorkersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Workers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Workers>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Workers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Workers<TData = Awaited<ReturnType<typeof getApiV1Workers>>, TError = ErrorResponse>(
 params?: GetApiV1WorkersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Workers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Workers>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Workers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Workers<TData = Awaited<ReturnType<typeof getApiV1Workers>>, TError = ErrorResponse>(
 params?: GetApiV1WorkersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Workers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List workers
 */

export function useGetApiV1Workers<TData = Awaited<ReturnType<typeof getApiV1Workers>>, TError = ErrorResponse>(
 params?: GetApiV1WorkersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Workers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1WorkersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get details of a specific worker by ID
 * @summary Get a worker
 */
export const getApiV1WorkersId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Worker>(
      {url: `/api/v1/workers/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1WorkersIdQueryKey = (id: string,) => {
    return [`/api/v1/workers/${id}`] as const;
    }

    
export const getGetApiV1WorkersIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1WorkersId>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1WorkersId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1WorkersIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1WorkersId>>> = ({ signal }) => getApiV1WorkersId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1WorkersId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1WorkersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1WorkersId>>>
export type GetApiV1WorkersIdQueryError = ErrorResponse


export function useGetApiV1WorkersId<TData = Awaited<ReturnType<typeof getApiV1WorkersId>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1WorkersId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1WorkersId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1WorkersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1WorkersId<TData = Awaited<ReturnType<typeof getApiV1WorkersId>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1WorkersId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1WorkersId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1WorkersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1WorkersId<TData = Awaited<ReturnType<typeof getApiV1WorkersId>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1WorkersId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a worker
 */

export function useGetApiV1WorkersId<TData = Awaited<ReturnType<typeof getApiV1WorkersId>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1WorkersId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1WorkersIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete a worker from the pool
 * @summary Delete a worker
 */
export const deleteApiV1WorkersId = (
    id: string,
 ) => {
      
      
      return customInstance<MessageResponse>(
      {url: `/api/v1/workers/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiV1WorkersIdMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1WorkersId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1WorkersId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiV1WorkersId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1WorkersId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiV1WorkersId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1WorkersIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1WorkersId>>>
    
    export type DeleteApiV1WorkersIdMutationError = ErrorResponse

    /**
 * @summary Delete a worker
 */
export const useDeleteApiV1WorkersId = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1WorkersId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1WorkersId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1WorkersIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Update worker status with current active session count
 * @summary Send worker heartbeat
 */
export const postApiV1WorkersIdHeartbeat = (
    id: string,
    workerHeartbeatRequest: WorkerHeartbeatRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<MessageResponse>(
      {url: `/api/v1/workers/${id}/heartbeat`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: workerHeartbeatRequest, signal
    },
      );
    }
  


export const getPostApiV1WorkersIdHeartbeatMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1WorkersIdHeartbeat>>, TError,{id: string;data: WorkerHeartbeatRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1WorkersIdHeartbeat>>, TError,{id: string;data: WorkerHeartbeatRequest}, TContext> => {

const mutationKey = ['postApiV1WorkersIdHeartbeat'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1WorkersIdHeartbeat>>, {id: string;data: WorkerHeartbeatRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  postApiV1WorkersIdHeartbeat(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1WorkersIdHeartbeatMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1WorkersIdHeartbeat>>>
    export type PostApiV1WorkersIdHeartbeatMutationBody = WorkerHeartbeatRequest
    export type PostApiV1WorkersIdHeartbeatMutationError = ErrorResponse

    /**
 * @summary Send worker heartbeat
 */
export const usePostApiV1WorkersIdHeartbeat = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1WorkersIdHeartbeat>>, TError,{id: string;data: WorkerHeartbeatRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1WorkersIdHeartbeat>>,
        TError,
        {id: string;data: WorkerHeartbeatRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1WorkersIdHeartbeatMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Pause or resume a worker to control its availability
 * @summary Pause or resume a worker
 */
export const postApiV1WorkersIdPause = (
    id: string,
    workerPauseRequest: WorkerPauseRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<MessageResponse>(
      {url: `/api/v1/workers/${id}/pause`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: workerPauseRequest, signal
    },
      );
    }
  


export const getPostApiV1WorkersIdPauseMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1WorkersIdPause>>, TError,{id: string;data: WorkerPauseRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1WorkersIdPause>>, TError,{id: string;data: WorkerPauseRequest}, TContext> => {

const mutationKey = ['postApiV1WorkersIdPause'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1WorkersIdPause>>, {id: string;data: WorkerPauseRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  postApiV1WorkersIdPause(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1WorkersIdPauseMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1WorkersIdPause>>>
    export type PostApiV1WorkersIdPauseMutationBody = WorkerPauseRequest
    export type PostApiV1WorkersIdPauseMutationError = ErrorResponse

    /**
 * @summary Pause or resume a worker
 */
export const usePostApiV1WorkersIdPause = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1WorkersIdPause>>, TError,{id: string;data: WorkerPauseRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1WorkersIdPause>>,
        TError,
        {id: string;data: WorkerPauseRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1WorkersIdPauseMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    