{
    "swagger": "2.0",
    "info": {
        "description": "BrowserGrid is a distributed browser automation platform using task queues for scalable browser session management.",
        "title": "BrowserGrid API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "2.0"
    },
    "host": "localhost:8765",
    "basePath": "/",
    "paths": {
        "/api/v1/events": {
            "get": {
                "description": "Get a list of events for browser sessions with optional filtering by session ID, event type, time range, and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "List session events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID (UUID) - alternative to path parameter",
                        "name": "session_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "session_created",
                            "resource_allocated",
                            "session_starting",
                            "container_started",
                            "browser_started",
                            "session_available",
                            "session_claimed",
                            "session_assigned",
                            "session_ready",
                            "session_active",
                            "session_idle",
                            "heartbeat",
                            "pool_added",
                            "pool_removed",
                            "pool_drained",
                            "session_completed",
                            "session_expired",
                            "session_timed_out",
                            "session_terminated",
                            "startup_failed",
                            "browser_crashed",
                            "container_crashed",
                            "resource_exhausted",
                            "network_error",
                            "status_changed",
                            "config_updated",
                            "health_check"
                        ],
                        "type": "string",
                        "description": "Filter by event type",
                        "name": "event_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter events after this time (RFC3339 format)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter events before this time (RFC3339 format)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "Number of events to skip",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 100,
                        "description": "Maximum number of events to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of events",
                        "schema": {
                            "$ref": "#/definitions/SessionEventListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid session ID or parameters",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new event for a browser session. The session ID can be provided in the URL path or in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Create a session event",
                "parameters": [
                    {
                        "description": "Event data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SessionEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Event created successfully",
                        "schema": {
                            "$ref": "#/definitions/SessionEvent"
                        }
                    },
                    "400": {
                        "description": "Invalid request data or missing session_id/event",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/metrics": {
            "post": {
                "description": "Create performance metrics for a browser session. The session ID can be provided in the URL path or in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Create session metrics",
                "parameters": [
                    {
                        "description": "Performance metrics data",
                        "name": "metrics",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SessionMetrics"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Metrics created successfully",
                        "schema": {
                            "$ref": "#/definitions/SessionMetrics"
                        }
                    },
                    "400": {
                        "description": "Invalid request data or missing session_id",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/monitoring": {
            "get": {
                "description": "Get comprehensive monitoring information including servers, queues, and health",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Get monitoring information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MonitoringInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/monitoring/health": {
            "get": {
                "description": "Get health status of the worker system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Get health status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/monitoring/metrics": {
            "get": {
                "description": "Get time-series metrics for tasks processed, failed, and error rate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Get time-series metrics",
                "parameters": [
                    {
                        "enum": [
                            "5m",
                            "30m",
                            "1h",
                            "6h",
                            "1d",
                            "7d"
                        ],
                        "type": "string",
                        "default": "30m",
                        "description": "Time range",
                        "name": "range",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Queue names to filter",
                        "name": "queues",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.SystemMetrics"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/monitoring/queues": {
            "get": {
                "description": "Get statistics for all queues",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Get queue statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/asynq.QueueInfo"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/monitoring/queues/extended": {
            "get": {
                "description": "Get extended statistics for all queues including memory usage and error rates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Get extended queue statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_monitoring.QueueStatsExtended"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/monitoring/queues/{name}": {
            "get": {
                "description": "Get detailed information about a specific queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Get queue details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Queue name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/asynq.QueueInfo"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/monitoring/queues/{name}/archived": {
            "delete": {
                "description": "Delete all archived (failed) tasks from a queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Delete archived tasks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Queue name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/monitoring/queues/{name}/pause": {
            "post": {
                "description": "Pause processing of a specific queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Pause queue",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Queue name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/monitoring/queues/{name}/retry": {
            "delete": {
                "description": "Delete all retry tasks from a queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Delete retry tasks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Queue name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/monitoring/queues/{name}/tasks": {
            "get": {
                "description": "Get sample of tasks in various states for a queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Get queue tasks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Queue name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TaskInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/monitoring/queues/{name}/unpause": {
            "post": {
                "description": "Resume processing of a paused queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Unpause queue",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Queue name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/monitoring/scheduler": {
            "get": {
                "description": "Get all scheduled and periodic tasks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Get scheduler entries",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/asynq.SchedulerEntry"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/monitoring/servers": {
            "get": {
                "description": "Get information about all Asynq servers (workers)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Get server information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_monitoring.ServerInfoSnakeCase"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_monitoring.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/sessions": {
            "get": {
                "description": "Get a list of browser sessions with optional filtering by status, time range, and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "List browser sessions",
                "parameters": [
                    {
                        "enum": [
                            "pending",
                            "starting",
                            "available",
                            "claimed",
                            "running",
                            "idle",
                            "completed",
                            "failed",
                            "expired",
                            "crashed",
                            "timed_out",
                            "terminated"
                        ],
                        "type": "string",
                        "description": "Filter by session status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter sessions created after this time (RFC3339 format)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter sessions created before this time (RFC3339 format)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "Number of sessions to skip",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 100,
                        "description": "Maximum number of sessions to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of sessions",
                        "schema": {
                            "$ref": "#/definitions/SessionListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new browser session with specified configuration. The session will be created in pending status and a start task will be enqueued.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Create a new browser session",
                "parameters": [
                    {
                        "description": "Session configuration",
                        "name": "session",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Session created successfully",
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{id}": {
            "get": {
                "description": "Get detailed information about a specific browser session by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get a browser session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session details",
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    },
                    "400": {
                        "description": "Invalid session ID",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Stop and terminate a running browser session. If the session is already in a terminal state, it will return success immediately.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Delete a browser session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session termination initiated or already terminated",
                        "schema": {
                            "$ref": "#/definitions/MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid session ID",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{id}/events": {
            "get": {
                "description": "Get a list of events for browser sessions with optional filtering by session ID, event type, time range, and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "List session events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Session ID (UUID) - alternative to path parameter",
                        "name": "session_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "session_created",
                            "resource_allocated",
                            "session_starting",
                            "container_started",
                            "browser_started",
                            "session_available",
                            "session_claimed",
                            "session_assigned",
                            "session_ready",
                            "session_active",
                            "session_idle",
                            "heartbeat",
                            "pool_added",
                            "pool_removed",
                            "pool_drained",
                            "session_completed",
                            "session_expired",
                            "session_timed_out",
                            "session_terminated",
                            "startup_failed",
                            "browser_crashed",
                            "container_crashed",
                            "resource_exhausted",
                            "network_error",
                            "status_changed",
                            "config_updated",
                            "health_check"
                        ],
                        "type": "string",
                        "description": "Filter by event type",
                        "name": "event_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter events after this time (RFC3339 format)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter events before this time (RFC3339 format)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "Number of events to skip",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 100,
                        "description": "Maximum number of events to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of events",
                        "schema": {
                            "$ref": "#/definitions/SessionEventListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid session ID or parameters",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new event for a browser session. The session ID can be provided in the URL path or in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Create a session event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Event data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SessionEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Event created successfully",
                        "schema": {
                            "$ref": "#/definitions/SessionEvent"
                        }
                    },
                    "400": {
                        "description": "Invalid request data or missing session_id/event",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{id}/metrics": {
            "post": {
                "description": "Create performance metrics for a browser session. The session ID can be provided in the URL path or in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Create session metrics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Performance metrics data",
                        "name": "metrics",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SessionMetrics"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Metrics created successfully",
                        "schema": {
                            "$ref": "#/definitions/SessionMetrics"
                        }
                    },
                    "400": {
                        "description": "Invalid request data or missing session_id",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/workpools": {
            "get": {
                "description": "Get a list of all work pools with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workpools"
                ],
                "summary": "List work pools",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Filter by paused status",
                        "name": "paused",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of work pools",
                        "schema": {
                            "$ref": "#/definitions/WorkPoolListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new work pool to manage browser workers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workpools"
                ],
                "summary": "Create a new work pool",
                "parameters": [
                    {
                        "description": "Work pool configuration",
                        "name": "workpool",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WorkPool"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/WorkPool"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/workpools/{id}": {
            "get": {
                "description": "Get details of a specific work pool by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workpools"
                ],
                "summary": "Get a work pool",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Work Pool ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WorkPool"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing work pool and all its workers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workpools"
                ],
                "summary": "Delete a work pool",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Work Pool ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update configuration of an existing work pool",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workpools"
                ],
                "summary": "Update a work pool",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Work Pool ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/workpools/{id}/drain": {
            "post": {
                "description": "Gracefully drain all workers from a work pool",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workpools"
                ],
                "summary": "Drain a work pool",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Work Pool ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/workpools/{id}/scale": {
            "post": {
                "description": "Update scaling parameters for a work pool",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workpools"
                ],
                "summary": "Scale a work pool",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Work Pool ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Scaling parameters",
                        "name": "scaling",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ScalingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Scaling operation result",
                        "schema": {
                            "$ref": "#/definitions/ScalingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/workpools/{id}/stats": {
            "get": {
                "description": "Get detailed statistics and metrics for a specific work pool",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pool-management"
                ],
                "summary": "Get work pool statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Work Pool ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Work pool statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Browser": {
            "description": "Supported browser types",
            "type": "string",
            "enum": [
                "chrome",
                "chromium",
                "firefox",
                "edge",
                "webkit",
                "safari"
            ],
            "x-enum-varnames": [
                "BrowserChrome",
                "BrowserChromium",
                "BrowserFirefox",
                "BrowserEdge",
                "BrowserOpera",
                "BrowserSafari"
            ]
        },
        "BrowserVersion": {
            "description": "Browser version types (latest, stable, canary, dev)",
            "type": "string",
            "enum": [
                "latest",
                "stable",
                "canary",
                "dev"
            ],
            "x-enum-varnames": [
                "VerLatest",
                "VerStable",
                "VerCanary",
                "VerDev"
            ]
        },
        "ErrorResponse": {
            "description": "Standard error response format",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid session ID"
                }
            }
        },
        "MessageResponse": {
            "description": "Simple message response",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                }
            }
        },
        "MonitoringInfo": {
            "type": "object",
            "properties": {
                "queue_health": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/QueueHealth"
                    }
                },
                "queue_stats": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/asynq.QueueInfo"
                    }
                },
                "server_stats": {
                    "$ref": "#/definitions/ServerStats"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/asynq.ServerInfo"
                    }
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "OperatingSystem": {
            "description": "Supported operating systems for browser sessions",
            "type": "string",
            "enum": [
                "windows",
                "macos",
                "linux"
            ],
            "x-enum-varnames": [
                "OSWindows",
                "OSMacOS",
                "OSLinux"
            ]
        },
        "ProviderType": {
            "description": "Type of provider for a work pool",
            "type": "string",
            "enum": [
                "docker",
                "azure_aci",
                "local"
            ],
            "x-enum-varnames": [
                "ProviderDocker",
                "ProviderACI",
                "ProviderLocal"
            ]
        },
        "ProxyConfig": {
            "description": "Proxy configuration with URL and optional credentials",
            "type": "object",
            "properties": {
                "proxy_password": {
                    "type": "string",
                    "example": "pass"
                },
                "proxy_url": {
                    "type": "string",
                    "example": "http://proxy.example.com:8080"
                },
                "proxy_username": {
                    "type": "string",
                    "example": "user"
                }
            }
        },
        "QueueHealth": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "integer"
                },
                "archived": {
                    "type": "integer"
                },
                "completed": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "paused": {
                    "type": "boolean"
                },
                "pending": {
                    "type": "integer"
                },
                "retry": {
                    "type": "integer"
                },
                "scheduled": {
                    "type": "integer"
                },
                "status": {
                    "description": "\"healthy\", \"warning\", \"critical\", \"error\", \"paused\"",
                    "type": "string"
                }
            }
        },
        "ResourceLimits": {
            "description": "Resource limits for CPU, memory and timeout",
            "type": "object",
            "properties": {
                "cpu": {
                    "type": "number",
                    "example": 2
                },
                "memory": {
                    "type": "string",
                    "example": "2GB"
                },
                "timeout_minutes": {
                    "type": "integer",
                    "example": 30
                }
            }
        },
        "ScalingRequest": {
            "description": "Scaling parameters for updating work pool configuration",
            "type": "object",
            "properties": {
                "auto_scale": {
                    "type": "boolean",
                    "example": true
                },
                "max_concurrency": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 10
                },
                "max_idle_time": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 1800
                },
                "max_session_duration": {
                    "type": "integer",
                    "minimum": 60,
                    "example": 1800
                },
                "min_size": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 1
                },
                "paused": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "ScalingResponse": {
            "description": "Response from a scaling operation with updated parameters",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "pool scaled"
                },
                "updates": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "ScreenConfig": {
            "description": "Screen configuration with width, height, DPI and scale",
            "type": "object",
            "properties": {
                "dpi": {
                    "type": "integer",
                    "example": 96
                },
                "height": {
                    "type": "integer",
                    "example": 1080
                },
                "scale": {
                    "type": "number",
                    "example": 1
                },
                "width": {
                    "type": "integer",
                    "example": 1920
                }
            }
        },
        "ServerStats": {
            "type": "object",
            "properties": {
                "active_servers": {
                    "type": "integer"
                },
                "total_queues": {
                    "description": "queue name -\u003e count of servers processing it",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "total_servers": {
                    "type": "integer"
                }
            }
        },
        "Session": {
            "description": "Browser session with configuration and status",
            "type": "object",
            "properties": {
                "available_at": {
                    "type": "string",
                    "example": "2023-01-01T00:15:00Z"
                },
                "browser": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Browser"
                        }
                    ],
                    "example": "chrome"
                },
                "claimed_at": {
                    "type": "string",
                    "example": "2023-01-01T00:30:00Z"
                },
                "claimed_by": {
                    "type": "string",
                    "example": "client-123"
                },
                "container_id": {
                    "type": "string",
                    "example": "abc123"
                },
                "container_network": {
                    "type": "string",
                    "example": "browsergrid_default"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "environment": {
                    "type": "object"
                },
                "expires_at": {
                    "type": "string",
                    "example": "2023-01-01T01:00:00Z"
                },
                "headless": {
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "is_pooled": {
                    "type": "boolean",
                    "example": false
                },
                "live_url": {
                    "type": "string",
                    "example": "http://localhost:80"
                },
                "operating_system": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/OperatingSystem"
                        }
                    ],
                    "example": "linux"
                },
                "pool_id": {
                    "type": "string",
                    "example": "chrome-pool"
                },
                "provider": {
                    "type": "string",
                    "example": "local"
                },
                "proxy": {
                    "$ref": "#/definitions/ProxyConfig"
                },
                "resource_limits": {
                    "$ref": "#/definitions/ResourceLimits"
                },
                "screen": {
                    "$ref": "#/definitions/ScreenConfig"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/SessionStatus"
                        }
                    ],
                    "example": "pending"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "version": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/BrowserVersion"
                        }
                    ],
                    "example": "latest"
                },
                "webhooks_enabled": {
                    "type": "boolean",
                    "example": false
                },
                "work_pool_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440002"
                },
                "ws_endpoint": {
                    "type": "string",
                    "example": "ws://localhost:80/devtools/browser"
                }
            }
        },
        "SessionEvent": {
            "description": "Session event with type, data and timestamp",
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "event": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/SessionEventType"
                        }
                    ],
                    "example": "session_created"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440003"
                },
                "session_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                }
            }
        },
        "SessionEventListResponse": {
            "description": "Response containing a list of session events with pagination info",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SessionEvent"
                    }
                },
                "limit": {
                    "type": "integer",
                    "example": 100
                },
                "offset": {
                    "type": "integer",
                    "example": 0
                },
                "total": {
                    "type": "integer",
                    "example": 15
                }
            }
        },
        "SessionEventType": {
            "description": "Types of events that can occur during a session",
            "type": "string",
            "enum": [
                "session_created",
                "resource_allocated",
                "session_starting",
                "container_started",
                "browser_started",
                "session_available",
                "session_claimed",
                "session_assigned",
                "session_ready",
                "session_active",
                "session_idle",
                "heartbeat",
                "pool_added",
                "pool_removed",
                "pool_drained",
                "session_completed",
                "session_expired",
                "session_timed_out",
                "session_terminated",
                "startup_failed",
                "browser_crashed",
                "container_crashed",
                "resource_exhausted",
                "network_error",
                "status_changed",
                "config_updated",
                "health_check"
            ],
            "x-enum-varnames": [
                "EvtSessionCreated",
                "EvtResourceAllocated",
                "EvtSessionStarting",
                "EvtContainerStarted",
                "EvtBrowserStarted",
                "EvtSessionAvailable",
                "EvtSessionClaimed",
                "EvtSessionAssigned",
                "EvtSessionReady",
                "EvtSessionActive",
                "EvtSessionIdle",
                "EvtHeartbeat",
                "EvtPoolAdded",
                "EvtPoolRemoved",
                "EvtPoolDrained",
                "EvtSessionCompleted",
                "EvtSessionExpired",
                "EvtSessionTimedOut",
                "EvtSessionTerminated",
                "EvtStartupFailed",
                "EvtBrowserCrashed",
                "EvtContainerCrashed",
                "EvtResourceExhausted",
                "EvtNetworkError",
                "EvtStatusChanged",
                "EvtConfigUpdated",
                "EvtHealthCheck"
            ]
        },
        "SessionListResponse": {
            "description": "Response containing a list of sessions with pagination info",
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer",
                    "example": 100
                },
                "offset": {
                    "type": "integer",
                    "example": 0
                },
                "sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Session"
                    }
                },
                "total": {
                    "type": "integer",
                    "example": 25
                }
            }
        },
        "SessionMetrics": {
            "description": "Performance metrics including CPU, memory and network usage",
            "type": "object",
            "properties": {
                "cpu_percent": {
                    "type": "number",
                    "example": 45.2
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440004"
                },
                "memory_mb": {
                    "type": "number",
                    "example": 1024.5
                },
                "network_rx_bytes": {
                    "type": "integer",
                    "example": 1048576
                },
                "network_tx_bytes": {
                    "type": "integer",
                    "example": 2097152
                },
                "session_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                }
            }
        },
        "SessionStatus": {
            "description": "Current status of a browser session",
            "type": "string",
            "enum": [
                "pending",
                "starting",
                "available",
                "claimed",
                "running",
                "idle",
                "completed",
                "failed",
                "expired",
                "crashed",
                "timed_out",
                "terminated"
            ],
            "x-enum-varnames": [
                "StatusPending",
                "StatusStarting",
                "StatusAvailable",
                "StatusClaimed",
                "StatusRunning",
                "StatusIdle",
                "StatusCompleted",
                "StatusFailed",
                "StatusExpired",
                "StatusCrashed",
                "StatusTimedOut",
                "StatusTerminated"
            ]
        },
        "TaskInfo": {
            "type": "object",
            "properties": {
                "active_tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/asynq.TaskInfo"
                    }
                },
                "archived_tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/asynq.TaskInfo"
                    }
                },
                "pending_tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/asynq.TaskInfo"
                    }
                },
                "queue": {
                    "type": "string"
                },
                "retry_tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/asynq.TaskInfo"
                    }
                },
                "scheduled_tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/asynq.TaskInfo"
                    }
                }
            }
        },
        "WorkPool": {
            "description": "Work pool configuration for managing browser workers",
            "type": "object",
            "properties": {
                "auto_scale": {
                    "type": "boolean",
                    "example": true
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "default_env": {
                    "type": "object"
                },
                "default_image": {
                    "type": "string",
                    "example": "browsergrid/chrome:latest"
                },
                "default_priority": {
                    "type": "integer",
                    "example": 0
                },
                "description": {
                    "type": "string",
                    "example": "Pool for Chrome browser workers"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "max_concurrency": {
                    "type": "integer",
                    "example": 10
                },
                "max_idle_time": {
                    "type": "integer",
                    "example": 1800
                },
                "max_session_duration": {
                    "type": "integer",
                    "example": 1800
                },
                "min_size": {
                    "type": "integer",
                    "example": 0
                },
                "name": {
                    "type": "string",
                    "example": "Chrome Workers"
                },
                "paused": {
                    "type": "boolean",
                    "example": false
                },
                "provider": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ProviderType"
                        }
                    ],
                    "example": "docker"
                },
                "queue_strategy": {
                    "type": "string",
                    "example": "fifo"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                }
            }
        },
        "WorkPoolListResponse": {
            "description": "Response containing a list of work pools",
            "type": "object",
            "properties": {
                "pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WorkPool"
                    }
                },
                "total": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "asynq.QueueInfo": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Number of active tasks.",
                    "type": "integer"
                },
                "aggregating": {
                    "description": "Number of aggregating tasks.",
                    "type": "integer"
                },
                "archived": {
                    "description": "Number of archived tasks.",
                    "type": "integer"
                },
                "completed": {
                    "description": "Number of stored completed tasks.",
                    "type": "integer"
                },
                "failed": {
                    "description": "Total number of tasks failed to be processed within the given date (counter resets daily).",
                    "type": "integer"
                },
                "failedTotal": {
                    "description": "Total number of tasks failed (cumulative).",
                    "type": "integer"
                },
                "groups": {
                    "description": "Groups is the total number of groups in the queue.",
                    "type": "integer"
                },
                "latency": {
                    "description": "Latency of the queue, measured by the oldest pending task in the queue.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/time.Duration"
                        }
                    ]
                },
                "memoryUsage": {
                    "description": "Total number of bytes that the queue and its tasks require to be stored in redis.\nIt is an approximate memory usage value in bytes since the value is computed by sampling.",
                    "type": "integer"
                },
                "paused": {
                    "description": "Paused indicates whether the queue is paused.\nIf true, tasks in the queue will not be processed.",
                    "type": "boolean"
                },
                "pending": {
                    "description": "Number of pending tasks.",
                    "type": "integer"
                },
                "processed": {
                    "description": "Total number of tasks being processed within the given date (counter resets daily).\nThe number includes both succeeded and failed tasks.",
                    "type": "integer"
                },
                "processedTotal": {
                    "description": "Total number of tasks processed (cumulative).",
                    "type": "integer"
                },
                "queue": {
                    "description": "Name of the queue.",
                    "type": "string"
                },
                "retry": {
                    "description": "Number of retry tasks.",
                    "type": "integer"
                },
                "scheduled": {
                    "description": "Number of scheduled tasks.",
                    "type": "integer"
                },
                "size": {
                    "description": "Size is the total number of tasks in the queue.\nThe value is the sum of Pending, Active, Scheduled, Retry, Aggregating and Archived.",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "Time when this queue info snapshot was taken.",
                    "type": "string"
                }
            }
        },
        "asynq.SchedulerEntry": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Identifier of this entry.",
                    "type": "string"
                },
                "next": {
                    "description": "Next shows the next time the task will be enqueued.",
                    "type": "string"
                },
                "opts": {
                    "description": "Opts is the options for the periodic task.",
                    "type": "array",
                    "items": {}
                },
                "prev": {
                    "description": "Prev shows the last time the task was enqueued.\nZero time if task was never enqueued.",
                    "type": "string"
                },
                "spec": {
                    "description": "Spec describes the schedule of this entry.",
                    "type": "string"
                },
                "task": {
                    "description": "Periodic Task registered for this entry.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/asynq.Task"
                        }
                    ]
                }
            }
        },
        "asynq.ServerInfo": {
            "type": "object",
            "properties": {
                "activeWorkers": {
                    "description": "A List of active workers currently processing tasks.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/asynq.WorkerInfo"
                    }
                },
                "concurrency": {
                    "description": "Server configuration details.\nSee Config doc for field descriptions.",
                    "type": "integer"
                },
                "host": {
                    "description": "Host machine on which the server is running.",
                    "type": "string"
                },
                "id": {
                    "description": "Unique Identifier for the server.",
                    "type": "string"
                },
                "pid": {
                    "description": "PID of the process in which the server is running.",
                    "type": "integer"
                },
                "queues": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "started": {
                    "description": "Time the server started.",
                    "type": "string"
                },
                "status": {
                    "description": "Status indicates the status of the server.\nTODO: Update comment with more details.",
                    "type": "string"
                },
                "strictPriority": {
                    "type": "boolean"
                }
            }
        },
        "asynq.Task": {
            "type": "object"
        },
        "asynq.TaskInfo": {
            "type": "object",
            "properties": {
                "completedAt": {
                    "description": "CompletedAt is the time when the task is processed successfully.\nZero value (i.e. time.Time{}) indicates no value.",
                    "type": "string"
                },
                "deadline": {
                    "description": "Deadline is the deadline for the task, zero value if not specified.",
                    "type": "string"
                },
                "group": {
                    "description": "Group is the name of the group in which the task belongs.\n\nTasks in the same queue can be grouped together by Group name and will be aggregated into one task\nby a Server processing the queue.\n\nEmpty string (default) indicates task does not belong to any groups, and no aggregation will be applied to the task.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the identifier of the task.",
                    "type": "string"
                },
                "isOrphaned": {
                    "description": "IsOrphaned describes whether the task is left in active state with no worker processing it.\nAn orphaned task indicates that the worker has crashed or experienced network failures and was not able to\nextend its lease on the task.\n\nThis task will be recovered by running a server against the queue the task is in.\nThis field is only applicable to tasks with TaskStateActive.",
                    "type": "boolean"
                },
                "lastErr": {
                    "description": "LastErr is the error message from the last failure.",
                    "type": "string"
                },
                "lastFailedAt": {
                    "description": "LastFailedAt is the time time of the last failure if any.\nIf the task has no failures, LastFailedAt is zero time (i.e. time.Time{}).",
                    "type": "string"
                },
                "maxRetry": {
                    "description": "MaxRetry is the maximum number of times the task can be retried.",
                    "type": "integer"
                },
                "nextProcessAt": {
                    "description": "NextProcessAt is the time the task is scheduled to be processed,\nzero if not applicable.",
                    "type": "string"
                },
                "payload": {
                    "description": "Payload is the payload data of the task.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "queue": {
                    "description": "Queue is the name of the queue in which the task belongs.",
                    "type": "string"
                },
                "result": {
                    "description": "Result holds the result data associated with the task.\nUse ResultWriter to write result data from the Handler.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "retention": {
                    "description": "Retention is duration of the retention period after the task is successfully processed.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/time.Duration"
                        }
                    ]
                },
                "retried": {
                    "description": "Retried is the number of times the task has retried so far.",
                    "type": "integer"
                },
                "state": {
                    "description": "State indicates the task state.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/asynq.TaskState"
                        }
                    ]
                },
                "timeout": {
                    "description": "Timeout is the duration the task can be processed by Handler before being retried,\nzero if not specified",
                    "allOf": [
                        {
                            "$ref": "#/definitions/time.Duration"
                        }
                    ]
                },
                "type": {
                    "description": "Type is the type name of the task.",
                    "type": "string"
                }
            }
        },
        "asynq.TaskState": {
            "type": "integer",
            "enum": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "x-enum-varnames": [
                "TaskStateActive",
                "TaskStatePending",
                "TaskStateScheduled",
                "TaskStateRetry",
                "TaskStateArchived",
                "TaskStateCompleted",
                "TaskStateAggregating"
            ]
        },
        "asynq.WorkerInfo": {
            "type": "object",
            "properties": {
                "deadline": {
                    "description": "Time the worker needs to finish processing the task by.",
                    "type": "string"
                },
                "queue": {
                    "description": "Queue from which the worker got its task.",
                    "type": "string"
                },
                "started": {
                    "description": "Time the worker started processing the task.",
                    "type": "string"
                },
                "taskID": {
                    "description": "ID of the task the worker is processing.",
                    "type": "string"
                },
                "taskPayload": {
                    "description": "Payload of the task the worker is processing.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "taskType": {
                    "description": "Type of the task the worker is processing.",
                    "type": "string"
                }
            }
        },
        "internal_monitoring.ErrorResponse": {
            "description": "Error response",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "internal_monitoring.MessageResponse": {
            "description": "Simple message response",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                }
            }
        },
        "internal_monitoring.MetricsDataPoint": {
            "type": "object",
            "properties": {
                "timestamp": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "internal_monitoring.QueueMetrics": {
            "type": "object",
            "properties": {
                "error_rate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_monitoring.MetricsDataPoint"
                    }
                },
                "queue": {
                    "type": "string"
                },
                "queue_size": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_monitoring.MetricsDataPoint"
                    }
                },
                "tasks_failed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_monitoring.MetricsDataPoint"
                    }
                },
                "tasks_processed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_monitoring.MetricsDataPoint"
                    }
                }
            }
        },
        "internal_monitoring.QueueStatsExtended": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "integer"
                },
                "archived": {
                    "type": "integer"
                },
                "error_rate": {
                    "type": "number"
                },
                "failed": {
                    "type": "integer"
                },
                "last_activity": {
                    "type": "string"
                },
                "memory_usage": {
                    "type": "string"
                },
                "pending": {
                    "type": "integer"
                },
                "processed": {
                    "type": "integer"
                },
                "queue": {
                    "type": "string"
                },
                "retry": {
                    "type": "integer"
                },
                "scheduled": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "state": {
                    "description": "\"run\", \"paused\"",
                    "type": "string"
                }
            }
        },
        "internal_monitoring.ServerInfoSnakeCase": {
            "description": "Asynq server info with snake_case fields",
            "type": "object",
            "properties": {
                "active_workers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_monitoring.WorkerInfoSnakeCase"
                    }
                },
                "concurrency": {
                    "type": "integer",
                    "example": 2
                },
                "host": {
                    "type": "string",
                    "example": "edf39662766b"
                },
                "id": {
                    "type": "string",
                    "example": "a8f5232a-b393-47ff-ba96-97dd3b11d43e"
                },
                "pid": {
                    "type": "integer",
                    "example": 1
                },
                "queues": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "started": {
                    "type": "string",
                    "example": "2025-07-08T00:34:08.345326919Z"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "strict_priority": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "internal_monitoring.SystemMetrics": {
            "type": "object",
            "properties": {
                "error_rate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_monitoring.MetricsDataPoint"
                    }
                },
                "queue_metrics": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/internal_monitoring.QueueMetrics"
                    }
                },
                "tasks_failed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_monitoring.MetricsDataPoint"
                    }
                },
                "tasks_processed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_monitoring.MetricsDataPoint"
                    }
                }
            }
        },
        "internal_monitoring.WorkerInfoSnakeCase": {
            "description": "Asynq worker info with snake_case fields",
            "type": "object",
            "properties": {
                "deadline": {
                    "type": "string"
                },
                "queue": {
                    "type": "string"
                },
                "started": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                },
                "task_payload": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "task_type": {
                    "type": "string"
                }
            }
        },
        "time.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "API key for authentication. Can also be provided via query parameter 'api_key' or Authorization header.",
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}