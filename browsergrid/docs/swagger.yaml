basePath: /
definitions:
  Browser:
    description: Supported browser types
    enum:
    - chrome
    - chromium
    - firefox
    - edge
    - webkit
    - safari
    type: string
    x-enum-varnames:
    - BrowserChrome
    - BrowserChromium
    - BrowserFirefox
    - BrowserEdge
    - BrowserOpera
    - BrowserSafari
  BrowserVersion:
    description: Browser version types (latest, stable, canary, dev)
    enum:
    - latest
    - stable
    - canary
    - dev
    type: string
    x-enum-varnames:
    - VerLatest
    - VerStable
    - VerCanary
    - VerDev
  ErrorResponse:
    description: Standard error response format
    properties:
      error:
        example: Invalid session ID
        type: string
    type: object
  MessageResponse:
    description: Simple message response
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  MonitoringInfo:
    properties:
      queue_health:
        additionalProperties:
          $ref: '#/definitions/QueueHealth'
        type: object
      queue_stats:
        additionalProperties:
          $ref: '#/definitions/asynq.QueueInfo'
        type: object
      server_stats:
        $ref: '#/definitions/ServerStats'
      servers:
        items:
          $ref: '#/definitions/asynq.ServerInfo'
        type: array
      timestamp:
        type: string
    type: object
  OperatingSystem:
    description: Supported operating systems for browser sessions
    enum:
    - windows
    - macos
    - linux
    type: string
    x-enum-varnames:
    - OSWindows
    - OSMacOS
    - OSLinux
  ProviderType:
    description: Type of provider for a work pool
    enum:
    - docker
    - azure_aci
    - local
    type: string
    x-enum-varnames:
    - ProviderDocker
    - ProviderACI
    - ProviderLocal
  ProxyConfig:
    description: Proxy configuration with URL and optional credentials
    properties:
      proxy_password:
        example: pass
        type: string
      proxy_url:
        example: http://proxy.example.com:8080
        type: string
      proxy_username:
        example: user
        type: string
    type: object
  QueueHealth:
    properties:
      active:
        type: integer
      archived:
        type: integer
      completed:
        type: integer
      message:
        type: string
      paused:
        type: boolean
      pending:
        type: integer
      retry:
        type: integer
      scheduled:
        type: integer
      status:
        description: '"healthy", "warning", "critical", "error", "paused"'
        type: string
    type: object
  ResourceLimits:
    description: Resource limits for CPU, memory and timeout
    properties:
      cpu:
        example: 2
        type: number
      memory:
        example: 2GB
        type: string
      timeout_minutes:
        example: 30
        type: integer
    type: object
  ScalingRequest:
    description: Scaling parameters for updating work pool configuration
    properties:
      auto_scale:
        example: true
        type: boolean
      max_concurrency:
        example: 10
        minimum: 1
        type: integer
      max_idle_time:
        example: 1800
        minimum: 0
        type: integer
      max_session_duration:
        example: 1800
        minimum: 60
        type: integer
      min_size:
        example: 1
        minimum: 0
        type: integer
      paused:
        example: false
        type: boolean
    type: object
  ScalingResponse:
    description: Response from a scaling operation with updated parameters
    properties:
      message:
        example: pool scaled
        type: string
      updates:
        additionalProperties: true
        type: object
    type: object
  ScreenConfig:
    description: Screen configuration with width, height, DPI and scale
    properties:
      dpi:
        example: 96
        type: integer
      height:
        example: 1080
        type: integer
      scale:
        example: 1
        type: number
      width:
        example: 1920
        type: integer
    type: object
  ServerStats:
    properties:
      active_servers:
        type: integer
      total_queues:
        additionalProperties:
          type: integer
        description: queue name -> count of servers processing it
        type: object
      total_servers:
        type: integer
    type: object
  Session:
    description: Browser session with configuration and status
    properties:
      available_at:
        example: "2023-01-01T00:15:00Z"
        type: string
      browser:
        allOf:
        - $ref: '#/definitions/Browser'
        example: chrome
      claimed_at:
        example: "2023-01-01T00:30:00Z"
        type: string
      claimed_by:
        example: client-123
        type: string
      container_id:
        example: abc123
        type: string
      container_network:
        example: browsergrid_default
        type: string
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      environment:
        type: object
      expires_at:
        example: "2023-01-01T01:00:00Z"
        type: string
      headless:
        example: true
        type: boolean
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_pooled:
        example: false
        type: boolean
      live_url:
        example: http://localhost:80
        type: string
      operating_system:
        allOf:
        - $ref: '#/definitions/OperatingSystem'
        example: linux
      pool_id:
        example: chrome-pool
        type: string
      provider:
        example: local
        type: string
      proxy:
        $ref: '#/definitions/ProxyConfig'
      resource_limits:
        $ref: '#/definitions/ResourceLimits'
      screen:
        $ref: '#/definitions/ScreenConfig'
      status:
        allOf:
        - $ref: '#/definitions/SessionStatus'
        example: pending
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      version:
        allOf:
        - $ref: '#/definitions/BrowserVersion'
        example: latest
      webhooks_enabled:
        example: false
        type: boolean
      work_pool_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      ws_endpoint:
        example: ws://localhost:80/devtools/browser
        type: string
    type: object
  SessionEvent:
    description: Session event with type, data and timestamp
    properties:
      data:
        type: object
      event:
        allOf:
        - $ref: '#/definitions/SessionEventType'
        example: session_created
      id:
        example: 550e8400-e29b-41d4-a716-446655440003
        type: string
      session_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      timestamp:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  SessionEventListResponse:
    description: Response containing a list of session events with pagination info
    properties:
      events:
        items:
          $ref: '#/definitions/SessionEvent'
        type: array
      limit:
        example: 100
        type: integer
      offset:
        example: 0
        type: integer
      total:
        example: 15
        type: integer
    type: object
  SessionEventType:
    description: Types of events that can occur during a session
    enum:
    - session_created
    - resource_allocated
    - session_starting
    - container_started
    - browser_started
    - session_available
    - session_claimed
    - session_assigned
    - session_ready
    - session_active
    - session_idle
    - heartbeat
    - pool_added
    - pool_removed
    - pool_drained
    - session_completed
    - session_expired
    - session_timed_out
    - session_terminated
    - startup_failed
    - browser_crashed
    - container_crashed
    - resource_exhausted
    - network_error
    - status_changed
    - config_updated
    - health_check
    type: string
    x-enum-varnames:
    - EvtSessionCreated
    - EvtResourceAllocated
    - EvtSessionStarting
    - EvtContainerStarted
    - EvtBrowserStarted
    - EvtSessionAvailable
    - EvtSessionClaimed
    - EvtSessionAssigned
    - EvtSessionReady
    - EvtSessionActive
    - EvtSessionIdle
    - EvtHeartbeat
    - EvtPoolAdded
    - EvtPoolRemoved
    - EvtPoolDrained
    - EvtSessionCompleted
    - EvtSessionExpired
    - EvtSessionTimedOut
    - EvtSessionTerminated
    - EvtStartupFailed
    - EvtBrowserCrashed
    - EvtContainerCrashed
    - EvtResourceExhausted
    - EvtNetworkError
    - EvtStatusChanged
    - EvtConfigUpdated
    - EvtHealthCheck
  SessionListResponse:
    description: Response containing a list of sessions with pagination info
    properties:
      limit:
        example: 100
        type: integer
      offset:
        example: 0
        type: integer
      sessions:
        items:
          $ref: '#/definitions/Session'
        type: array
      total:
        example: 25
        type: integer
    type: object
  SessionMetrics:
    description: Performance metrics including CPU, memory and network usage
    properties:
      cpu_percent:
        example: 45.2
        type: number
      id:
        example: 550e8400-e29b-41d4-a716-446655440004
        type: string
      memory_mb:
        example: 1024.5
        type: number
      network_rx_bytes:
        example: 1048576
        type: integer
      network_tx_bytes:
        example: 2097152
        type: integer
      session_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      timestamp:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  SessionStatus:
    description: Current status of a browser session
    enum:
    - pending
    - starting
    - available
    - claimed
    - running
    - idle
    - completed
    - failed
    - expired
    - crashed
    - timed_out
    - terminated
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusStarting
    - StatusAvailable
    - StatusClaimed
    - StatusRunning
    - StatusIdle
    - StatusCompleted
    - StatusFailed
    - StatusExpired
    - StatusCrashed
    - StatusTimedOut
    - StatusTerminated
  TaskInfo:
    properties:
      active_tasks:
        items:
          $ref: '#/definitions/asynq.TaskInfo'
        type: array
      archived_tasks:
        items:
          $ref: '#/definitions/asynq.TaskInfo'
        type: array
      pending_tasks:
        items:
          $ref: '#/definitions/asynq.TaskInfo'
        type: array
      queue:
        type: string
      retry_tasks:
        items:
          $ref: '#/definitions/asynq.TaskInfo'
        type: array
      scheduled_tasks:
        items:
          $ref: '#/definitions/asynq.TaskInfo'
        type: array
    type: object
  WorkPool:
    description: Work pool configuration for managing browser workers
    properties:
      auto_scale:
        example: true
        type: boolean
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      default_env:
        type: object
      default_image:
        example: browsergrid/chrome:latest
        type: string
      default_priority:
        example: 0
        type: integer
      description:
        example: Pool for Chrome browser workers
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      max_concurrency:
        example: 10
        type: integer
      max_idle_time:
        example: 1800
        type: integer
      max_session_duration:
        example: 1800
        type: integer
      min_size:
        example: 0
        type: integer
      name:
        example: Chrome Workers
        type: string
      paused:
        example: false
        type: boolean
      provider:
        allOf:
        - $ref: '#/definitions/ProviderType'
        example: docker
      queue_strategy:
        example: fifo
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  WorkPoolListResponse:
    description: Response containing a list of work pools
    properties:
      pools:
        items:
          $ref: '#/definitions/WorkPool'
        type: array
      total:
        example: 5
        type: integer
    type: object
  asynq.QueueInfo:
    properties:
      active:
        description: Number of active tasks.
        type: integer
      aggregating:
        description: Number of aggregating tasks.
        type: integer
      archived:
        description: Number of archived tasks.
        type: integer
      completed:
        description: Number of stored completed tasks.
        type: integer
      failed:
        description: Total number of tasks failed to be processed within the given
          date (counter resets daily).
        type: integer
      failedTotal:
        description: Total number of tasks failed (cumulative).
        type: integer
      groups:
        description: Groups is the total number of groups in the queue.
        type: integer
      latency:
        allOf:
        - $ref: '#/definitions/time.Duration'
        description: Latency of the queue, measured by the oldest pending task in
          the queue.
      memoryUsage:
        description: |-
          Total number of bytes that the queue and its tasks require to be stored in redis.
          It is an approximate memory usage value in bytes since the value is computed by sampling.
        type: integer
      paused:
        description: |-
          Paused indicates whether the queue is paused.
          If true, tasks in the queue will not be processed.
        type: boolean
      pending:
        description: Number of pending tasks.
        type: integer
      processed:
        description: |-
          Total number of tasks being processed within the given date (counter resets daily).
          The number includes both succeeded and failed tasks.
        type: integer
      processedTotal:
        description: Total number of tasks processed (cumulative).
        type: integer
      queue:
        description: Name of the queue.
        type: string
      retry:
        description: Number of retry tasks.
        type: integer
      scheduled:
        description: Number of scheduled tasks.
        type: integer
      size:
        description: |-
          Size is the total number of tasks in the queue.
          The value is the sum of Pending, Active, Scheduled, Retry, Aggregating and Archived.
        type: integer
      timestamp:
        description: Time when this queue info snapshot was taken.
        type: string
    type: object
  asynq.SchedulerEntry:
    properties:
      id:
        description: Identifier of this entry.
        type: string
      next:
        description: Next shows the next time the task will be enqueued.
        type: string
      opts:
        description: Opts is the options for the periodic task.
        items: {}
        type: array
      prev:
        description: |-
          Prev shows the last time the task was enqueued.
          Zero time if task was never enqueued.
        type: string
      spec:
        description: Spec describes the schedule of this entry.
        type: string
      task:
        allOf:
        - $ref: '#/definitions/asynq.Task'
        description: Periodic Task registered for this entry.
    type: object
  asynq.ServerInfo:
    properties:
      activeWorkers:
        description: A List of active workers currently processing tasks.
        items:
          $ref: '#/definitions/asynq.WorkerInfo'
        type: array
      concurrency:
        description: |-
          Server configuration details.
          See Config doc for field descriptions.
        type: integer
      host:
        description: Host machine on which the server is running.
        type: string
      id:
        description: Unique Identifier for the server.
        type: string
      pid:
        description: PID of the process in which the server is running.
        type: integer
      queues:
        additionalProperties:
          type: integer
        type: object
      started:
        description: Time the server started.
        type: string
      status:
        description: |-
          Status indicates the status of the server.
          TODO: Update comment with more details.
        type: string
      strictPriority:
        type: boolean
    type: object
  asynq.Task:
    type: object
  asynq.TaskInfo:
    properties:
      completedAt:
        description: |-
          CompletedAt is the time when the task is processed successfully.
          Zero value (i.e. time.Time{}) indicates no value.
        type: string
      deadline:
        description: Deadline is the deadline for the task, zero value if not specified.
        type: string
      group:
        description: |-
          Group is the name of the group in which the task belongs.

          Tasks in the same queue can be grouped together by Group name and will be aggregated into one task
          by a Server processing the queue.

          Empty string (default) indicates task does not belong to any groups, and no aggregation will be applied to the task.
        type: string
      id:
        description: ID is the identifier of the task.
        type: string
      isOrphaned:
        description: |-
          IsOrphaned describes whether the task is left in active state with no worker processing it.
          An orphaned task indicates that the worker has crashed or experienced network failures and was not able to
          extend its lease on the task.

          This task will be recovered by running a server against the queue the task is in.
          This field is only applicable to tasks with TaskStateActive.
        type: boolean
      lastErr:
        description: LastErr is the error message from the last failure.
        type: string
      lastFailedAt:
        description: |-
          LastFailedAt is the time time of the last failure if any.
          If the task has no failures, LastFailedAt is zero time (i.e. time.Time{}).
        type: string
      maxRetry:
        description: MaxRetry is the maximum number of times the task can be retried.
        type: integer
      nextProcessAt:
        description: |-
          NextProcessAt is the time the task is scheduled to be processed,
          zero if not applicable.
        type: string
      payload:
        description: Payload is the payload data of the task.
        items:
          type: integer
        type: array
      queue:
        description: Queue is the name of the queue in which the task belongs.
        type: string
      result:
        description: |-
          Result holds the result data associated with the task.
          Use ResultWriter to write result data from the Handler.
        items:
          type: integer
        type: array
      retention:
        allOf:
        - $ref: '#/definitions/time.Duration'
        description: Retention is duration of the retention period after the task
          is successfully processed.
      retried:
        description: Retried is the number of times the task has retried so far.
        type: integer
      state:
        allOf:
        - $ref: '#/definitions/asynq.TaskState'
        description: State indicates the task state.
      timeout:
        allOf:
        - $ref: '#/definitions/time.Duration'
        description: |-
          Timeout is the duration the task can be processed by Handler before being retried,
          zero if not specified
      type:
        description: Type is the type name of the task.
        type: string
    type: object
  asynq.TaskState:
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    type: integer
    x-enum-varnames:
    - TaskStateActive
    - TaskStatePending
    - TaskStateScheduled
    - TaskStateRetry
    - TaskStateArchived
    - TaskStateCompleted
    - TaskStateAggregating
  asynq.WorkerInfo:
    properties:
      deadline:
        description: Time the worker needs to finish processing the task by.
        type: string
      queue:
        description: Queue from which the worker got its task.
        type: string
      started:
        description: Time the worker started processing the task.
        type: string
      taskID:
        description: ID of the task the worker is processing.
        type: string
      taskPayload:
        description: Payload of the task the worker is processing.
        items:
          type: integer
        type: array
      taskType:
        description: Type of the task the worker is processing.
        type: string
    type: object
  internal_monitoring.ErrorResponse:
    description: Error response
    properties:
      error:
        example: Internal server error
        type: string
    type: object
  internal_monitoring.MessageResponse:
    description: Simple message response
    properties:
      message:
        example: Operation successful
        type: string
    type: object
  internal_monitoring.MetricsDataPoint:
    properties:
      timestamp:
        type: string
      value:
        type: number
    type: object
  internal_monitoring.QueueMetrics:
    properties:
      error_rate:
        items:
          $ref: '#/definitions/internal_monitoring.MetricsDataPoint'
        type: array
      queue:
        type: string
      queue_size:
        items:
          $ref: '#/definitions/internal_monitoring.MetricsDataPoint'
        type: array
      tasks_failed:
        items:
          $ref: '#/definitions/internal_monitoring.MetricsDataPoint'
        type: array
      tasks_processed:
        items:
          $ref: '#/definitions/internal_monitoring.MetricsDataPoint'
        type: array
    type: object
  internal_monitoring.QueueStatsExtended:
    properties:
      active:
        type: integer
      archived:
        type: integer
      error_rate:
        type: number
      failed:
        type: integer
      last_activity:
        type: string
      memory_usage:
        type: string
      pending:
        type: integer
      processed:
        type: integer
      queue:
        type: string
      retry:
        type: integer
      scheduled:
        type: integer
      size:
        type: integer
      state:
        description: '"run", "paused"'
        type: string
    type: object
  internal_monitoring.ServerInfoSnakeCase:
    description: Asynq server info with snake_case fields
    properties:
      active_workers:
        items:
          $ref: '#/definitions/internal_monitoring.WorkerInfoSnakeCase'
        type: array
      concurrency:
        example: 2
        type: integer
      host:
        example: edf39662766b
        type: string
      id:
        example: a8f5232a-b393-47ff-ba96-97dd3b11d43e
        type: string
      pid:
        example: 1
        type: integer
      queues:
        additionalProperties:
          type: integer
        type: object
      started:
        example: "2025-07-08T00:34:08.345326919Z"
        type: string
      status:
        example: active
        type: string
      strict_priority:
        example: false
        type: boolean
    type: object
  internal_monitoring.SystemMetrics:
    properties:
      error_rate:
        items:
          $ref: '#/definitions/internal_monitoring.MetricsDataPoint'
        type: array
      queue_metrics:
        additionalProperties:
          $ref: '#/definitions/internal_monitoring.QueueMetrics'
        type: object
      tasks_failed:
        items:
          $ref: '#/definitions/internal_monitoring.MetricsDataPoint'
        type: array
      tasks_processed:
        items:
          $ref: '#/definitions/internal_monitoring.MetricsDataPoint'
        type: array
    type: object
  internal_monitoring.WorkerInfoSnakeCase:
    description: Asynq worker info with snake_case fields
    properties:
      deadline:
        type: string
      queue:
        type: string
      started:
        type: string
      task_id:
        type: string
      task_payload:
        items:
          type: integer
        type: array
      task_type:
        type: string
    type: object
  time.Duration:
    enum:
    - -9223372036854775808
    - 9223372036854775807
    - 1
    - 1000
    - 1000000
    - 1000000000
    - 60000000000
    - 3600000000000
    type: integer
    x-enum-varnames:
    - minDuration
    - maxDuration
    - Nanosecond
    - Microsecond
    - Millisecond
    - Second
    - Minute
    - Hour
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8765
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: BrowserGrid is a distributed browser automation platform using task
    queues for scalable browser session management.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: BrowserGrid API
  version: "2.0"
paths:
  /api/v1/events:
    get:
      consumes:
      - application/json
      description: Get a list of events for browser sessions with optional filtering
        by session ID, event type, time range, and pagination
      parameters:
      - description: Session ID (UUID) - alternative to path parameter
        in: query
        name: session_id
        type: string
      - description: Filter by event type
        enum:
        - session_created
        - resource_allocated
        - session_starting
        - container_started
        - browser_started
        - session_available
        - session_claimed
        - session_assigned
        - session_ready
        - session_active
        - session_idle
        - heartbeat
        - pool_added
        - pool_removed
        - pool_drained
        - session_completed
        - session_expired
        - session_timed_out
        - session_terminated
        - startup_failed
        - browser_crashed
        - container_crashed
        - resource_exhausted
        - network_error
        - status_changed
        - config_updated
        - health_check
        in: query
        name: event_type
        type: string
      - description: Filter events after this time (RFC3339 format)
        in: query
        name: start_time
        type: string
      - description: Filter events before this time (RFC3339 format)
        in: query
        name: end_time
        type: string
      - default: 0
        description: Number of events to skip
        in: query
        minimum: 0
        name: offset
        type: integer
      - default: 100
        description: Maximum number of events to return
        in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of events
          schema:
            $ref: '#/definitions/SessionEventListResponse'
        "400":
          description: Invalid session ID or parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List session events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Create a new event for a browser session. The session ID can be
        provided in the URL path or in the request body.
      parameters:
      - description: Event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/SessionEvent'
      produces:
      - application/json
      responses:
        "201":
          description: Event created successfully
          schema:
            $ref: '#/definitions/SessionEvent'
        "400":
          description: Invalid request data or missing session_id/event
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a session event
      tags:
      - events
  /api/v1/metrics:
    post:
      consumes:
      - application/json
      description: Create performance metrics for a browser session. The session ID
        can be provided in the URL path or in the request body.
      parameters:
      - description: Performance metrics data
        in: body
        name: metrics
        required: true
        schema:
          $ref: '#/definitions/SessionMetrics'
      produces:
      - application/json
      responses:
        "201":
          description: Metrics created successfully
          schema:
            $ref: '#/definitions/SessionMetrics'
        "400":
          description: Invalid request data or missing session_id
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create session metrics
      tags:
      - metrics
  /api/v1/monitoring:
    get:
      consumes:
      - application/json
      description: Get comprehensive monitoring information including servers, queues,
        and health
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MonitoringInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_monitoring.ErrorResponse'
      summary: Get monitoring information
      tags:
      - monitoring
  /api/v1/monitoring/health:
    get:
      consumes:
      - application/json
      description: Get health status of the worker system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Service Unavailable
          schema:
            additionalProperties: true
            type: object
      summary: Get health status
      tags:
      - monitoring
  /api/v1/monitoring/metrics:
    get:
      consumes:
      - application/json
      description: Get time-series metrics for tasks processed, failed, and error
        rate
      parameters:
      - default: 30m
        description: Time range
        enum:
        - 5m
        - 30m
        - 1h
        - 6h
        - 1d
        - 7d
        in: query
        name: range
        type: string
      - collectionFormat: csv
        description: Queue names to filter
        in: query
        items:
          type: string
        name: queues
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_monitoring.SystemMetrics'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_monitoring.ErrorResponse'
      summary: Get time-series metrics
      tags:
      - monitoring
  /api/v1/monitoring/queues:
    get:
      consumes:
      - application/json
      description: Get statistics for all queues
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/asynq.QueueInfo'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_monitoring.ErrorResponse'
      summary: Get queue statistics
      tags:
      - monitoring
  /api/v1/monitoring/queues/{name}:
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific queue
      parameters:
      - description: Queue name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/asynq.QueueInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_monitoring.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_monitoring.ErrorResponse'
      summary: Get queue details
      tags:
      - monitoring
  /api/v1/monitoring/queues/{name}/archived:
    delete:
      consumes:
      - application/json
      description: Delete all archived (failed) tasks from a queue
      parameters:
      - description: Queue name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_monitoring.ErrorResponse'
      summary: Delete archived tasks
      tags:
      - monitoring
  /api/v1/monitoring/queues/{name}/pause:
    post:
      consumes:
      - application/json
      description: Pause processing of a specific queue
      parameters:
      - description: Queue name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_monitoring.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_monitoring.ErrorResponse'
      summary: Pause queue
      tags:
      - monitoring
  /api/v1/monitoring/queues/{name}/retry:
    delete:
      consumes:
      - application/json
      description: Delete all retry tasks from a queue
      parameters:
      - description: Queue name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_monitoring.ErrorResponse'
      summary: Delete retry tasks
      tags:
      - monitoring
  /api/v1/monitoring/queues/{name}/tasks:
    get:
      consumes:
      - application/json
      description: Get sample of tasks in various states for a queue
      parameters:
      - description: Queue name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TaskInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_monitoring.ErrorResponse'
      summary: Get queue tasks
      tags:
      - monitoring
  /api/v1/monitoring/queues/{name}/unpause:
    post:
      consumes:
      - application/json
      description: Resume processing of a paused queue
      parameters:
      - description: Queue name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_monitoring.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_monitoring.ErrorResponse'
      summary: Unpause queue
      tags:
      - monitoring
  /api/v1/monitoring/queues/extended:
    get:
      consumes:
      - application/json
      description: Get extended statistics for all queues including memory usage and
        error rates
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_monitoring.QueueStatsExtended'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_monitoring.ErrorResponse'
      summary: Get extended queue statistics
      tags:
      - monitoring
  /api/v1/monitoring/scheduler:
    get:
      consumes:
      - application/json
      description: Get all scheduled and periodic tasks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/asynq.SchedulerEntry'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_monitoring.ErrorResponse'
      summary: Get scheduler entries
      tags:
      - monitoring
  /api/v1/monitoring/servers:
    get:
      consumes:
      - application/json
      description: Get information about all Asynq servers (workers)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_monitoring.ServerInfoSnakeCase'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_monitoring.ErrorResponse'
      summary: Get server information
      tags:
      - monitoring
  /api/v1/sessions:
    get:
      consumes:
      - application/json
      description: Get a list of browser sessions with optional filtering by status,
        time range, and pagination
      parameters:
      - description: Filter by session status
        enum:
        - pending
        - starting
        - available
        - claimed
        - running
        - idle
        - completed
        - failed
        - expired
        - crashed
        - timed_out
        - terminated
        in: query
        name: status
        type: string
      - description: Filter sessions created after this time (RFC3339 format)
        in: query
        name: start_time
        type: string
      - description: Filter sessions created before this time (RFC3339 format)
        in: query
        name: end_time
        type: string
      - default: 0
        description: Number of sessions to skip
        in: query
        minimum: 0
        name: offset
        type: integer
      - default: 100
        description: Maximum number of sessions to return
        in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of sessions
          schema:
            $ref: '#/definitions/SessionListResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List browser sessions
      tags:
      - sessions
    post:
      consumes:
      - application/json
      description: Create a new browser session with specified configuration. The
        session will be created in pending status and a start task will be enqueued.
      parameters:
      - description: Session configuration
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/Session'
      produces:
      - application/json
      responses:
        "201":
          description: Session created successfully
          schema:
            $ref: '#/definitions/Session'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new browser session
      tags:
      - sessions
  /api/v1/sessions/{id}:
    delete:
      consumes:
      - application/json
      description: Stop and terminate a running browser session. If the session is
        already in a terminal state, it will return success immediately.
      parameters:
      - description: Session ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session termination initiated or already terminated
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Invalid session ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a browser session
      tags:
      - sessions
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific browser session by its
        ID
      parameters:
      - description: Session ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session details
          schema:
            $ref: '#/definitions/Session'
        "400":
          description: Invalid session ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get a browser session
      tags:
      - sessions
  /api/v1/sessions/{id}/events:
    get:
      consumes:
      - application/json
      description: Get a list of events for browser sessions with optional filtering
        by session ID, event type, time range, and pagination
      parameters:
      - description: Session ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Session ID (UUID) - alternative to path parameter
        in: query
        name: session_id
        type: string
      - description: Filter by event type
        enum:
        - session_created
        - resource_allocated
        - session_starting
        - container_started
        - browser_started
        - session_available
        - session_claimed
        - session_assigned
        - session_ready
        - session_active
        - session_idle
        - heartbeat
        - pool_added
        - pool_removed
        - pool_drained
        - session_completed
        - session_expired
        - session_timed_out
        - session_terminated
        - startup_failed
        - browser_crashed
        - container_crashed
        - resource_exhausted
        - network_error
        - status_changed
        - config_updated
        - health_check
        in: query
        name: event_type
        type: string
      - description: Filter events after this time (RFC3339 format)
        in: query
        name: start_time
        type: string
      - description: Filter events before this time (RFC3339 format)
        in: query
        name: end_time
        type: string
      - default: 0
        description: Number of events to skip
        in: query
        minimum: 0
        name: offset
        type: integer
      - default: 100
        description: Maximum number of events to return
        in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of events
          schema:
            $ref: '#/definitions/SessionEventListResponse'
        "400":
          description: Invalid session ID or parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List session events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Create a new event for a browser session. The session ID can be
        provided in the URL path or in the request body.
      parameters:
      - description: Session ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/SessionEvent'
      produces:
      - application/json
      responses:
        "201":
          description: Event created successfully
          schema:
            $ref: '#/definitions/SessionEvent'
        "400":
          description: Invalid request data or missing session_id/event
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a session event
      tags:
      - events
  /api/v1/sessions/{id}/metrics:
    post:
      consumes:
      - application/json
      description: Create performance metrics for a browser session. The session ID
        can be provided in the URL path or in the request body.
      parameters:
      - description: Session ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Performance metrics data
        in: body
        name: metrics
        required: true
        schema:
          $ref: '#/definitions/SessionMetrics'
      produces:
      - application/json
      responses:
        "201":
          description: Metrics created successfully
          schema:
            $ref: '#/definitions/SessionMetrics'
        "400":
          description: Invalid request data or missing session_id
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create session metrics
      tags:
      - metrics
  /api/v1/workpools:
    get:
      consumes:
      - application/json
      description: Get a list of all work pools with optional filtering
      parameters:
      - description: Filter by paused status
        in: query
        name: paused
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: List of work pools
          schema:
            $ref: '#/definitions/WorkPoolListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List work pools
      tags:
      - workpools
    post:
      consumes:
      - application/json
      description: Create a new work pool to manage browser workers
      parameters:
      - description: Work pool configuration
        in: body
        name: workpool
        required: true
        schema:
          $ref: '#/definitions/WorkPool'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/WorkPool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new work pool
      tags:
      - workpools
  /api/v1/workpools/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing work pool and all its workers
      parameters:
      - description: Work Pool ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a work pool
      tags:
      - workpools
    get:
      consumes:
      - application/json
      description: Get details of a specific work pool by ID
      parameters:
      - description: Work Pool ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/WorkPool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get a work pool
      tags:
      - workpools
    patch:
      consumes:
      - application/json
      description: Update configuration of an existing work pool
      parameters:
      - description: Work Pool ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a work pool
      tags:
      - workpools
  /api/v1/workpools/{id}/drain:
    post:
      consumes:
      - application/json
      description: Gracefully drain all workers from a work pool
      parameters:
      - description: Work Pool ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Drain a work pool
      tags:
      - workpools
  /api/v1/workpools/{id}/scale:
    post:
      consumes:
      - application/json
      description: Update scaling parameters for a work pool
      parameters:
      - description: Work Pool ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Scaling parameters
        in: body
        name: scaling
        required: true
        schema:
          $ref: '#/definitions/ScalingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Scaling operation result
          schema:
            $ref: '#/definitions/ScalingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Scale a work pool
      tags:
      - workpools
  /api/v1/workpools/{id}/stats:
    get:
      consumes:
      - application/json
      description: Get detailed statistics and metrics for a specific work pool
      parameters:
      - description: Work Pool ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Work pool statistics
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get work pool statistics
      tags:
      - pool-management
securityDefinitions:
  ApiKeyAuth:
    description: API key for authentication. Can also be provided via query parameter
      'api_key' or Authorization header.
    in: header
    name: X-API-Key
    type: apiKey
swagger: "2.0"
